[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EJSON = Package.ejson.EJSON;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar IdMap;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"id-map\":{\"id-map.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/id-map/id-map.js                                                                                      //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nvar _createForOfIteratorHelperLoose;\n\nmodule.link(\"@babel/runtime/helpers/createForOfIteratorHelperLoose\", {\n  default: function (v) {\n    _createForOfIteratorHelperLoose = v;\n  }\n}, 0);\n\nvar _slicedToArray;\n\nmodule.link(\"@babel/runtime/helpers/slicedToArray\", {\n  default: function (v) {\n    _slicedToArray = v;\n  }\n}, 1);\nmodule.export({\n  IdMap: function () {\n    return IdMap;\n  }\n});\n\nvar IdMap = /*#__PURE__*/function () {\n  function IdMap(idStringify, idParse) {\n    this._map = new Map();\n    this._idStringify = idStringify || JSON.stringify;\n    this._idParse = idParse || JSON.parse;\n  } // Some of these methods are designed to match methods on OrderedDict, since\n  // (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n  // (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n  // set of methods that overlap between the two.)\n\n\n  var _proto = IdMap.prototype;\n\n  _proto.get = function () {\n    function get(id) {\n      var key = this._idStringify(id);\n\n      return this._map.get(key);\n    }\n\n    return get;\n  }();\n\n  _proto.set = function () {\n    function set(id, value) {\n      var key = this._idStringify(id);\n\n      this._map.set(key, value);\n    }\n\n    return set;\n  }();\n\n  _proto.remove = function () {\n    function remove(id) {\n      var key = this._idStringify(id);\n\n      this._map.delete(key);\n    }\n\n    return remove;\n  }();\n\n  _proto.has = function () {\n    function has(id) {\n      var key = this._idStringify(id);\n\n      return this._map.has(key);\n    }\n\n    return has;\n  }();\n\n  _proto.empty = function () {\n    function empty() {\n      return this._map.size === 0;\n    }\n\n    return empty;\n  }();\n\n  _proto.clear = function () {\n    function clear() {\n      this._map.clear();\n    }\n\n    return clear;\n  }() // Iterates over the items in the map. Return `false` to break the loop.\n  ;\n\n  _proto.forEach = function () {\n    function forEach(iterator) {\n      // don't use _.each, because we can't break out of it.\n      for (var _iterator = _createForOfIteratorHelperLoose(this._map), _step; !(_step = _iterator()).done;) {\n        var _ref = _step.value;\n\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        var key = _ref2[0];\n        var value = _ref2[1];\n        var breakIfFalse = iterator.call(null, value, this._idParse(key));\n\n        if (breakIfFalse === false) {\n          return;\n        }\n      }\n    }\n\n    return forEach;\n  }();\n\n  _proto.size = function () {\n    function size() {\n      return this._map.size;\n    }\n\n    return size;\n  }();\n\n  _proto.setDefault = function () {\n    function setDefault(id, def) {\n      var key = this._idStringify(id);\n\n      if (this._map.has(key)) {\n        return this._map.get(key);\n      }\n\n      this._map.set(key, def);\n\n      return def;\n    }\n\n    return setDefault;\n  }() // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n  ;\n\n  _proto.clone = function () {\n    function clone() {\n      var clone = new IdMap(this._idStringify, this._idParse); // copy directly to avoid stringify/parse overhead\n\n      this._map.forEach(function (value, key) {\n        clone._map.set(key, EJSON.clone(value));\n      });\n\n      return clone;\n    }\n\n    return clone;\n  }();\n\n  return IdMap;\n}();\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/id-map/id-map.js\");\n\n/* Exports */\nPackage._define(\"id-map\", exports, {\n  IdMap: IdMap\n});\n\n})();\n","servePath":"/packages/id-map.js","sourceMap":{"version":3,"sources":["packages/id-map/id-map.js"],"names":["_createForOfIteratorHelperLoose","module","link","default","v","_slicedToArray","export","IdMap","idStringify","idParse","_map","Map","_idStringify","JSON","stringify","_idParse","parse","get","id","key","set","value","remove","delete","has","empty","size","clear","forEach","iterator","breakIfFalse","call","setDefault","def","clone","EJSON"],"mappings":"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","file":"/packages/id-map.js","sourcesContent":["\nexport class IdMap {\n  constructor(idStringify, idParse) {\n    this._map = new Map();\n    this._idStringify = idStringify || JSON.stringify;\n    this._idParse = idParse || JSON.parse;\n  }\n\n// Some of these methods are designed to match methods on OrderedDict, since\n// (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n// (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n// set of methods that overlap between the two.)\n\n  get(id) {\n    const key = this._idStringify(id);\n    return this._map.get(key);\n  }\n\n  set(id, value) {\n    const key = this._idStringify(id);\n    this._map.set(key, value);\n  }\n\n  remove(id) {\n    const key = this._idStringify(id);\n    this._map.delete(key);\n  }\n\n  has(id) {\n    const key = this._idStringify(id);\n    return this._map.has(key);\n  }\n\n  empty() {\n    return this._map.size === 0;\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n  // Iterates over the items in the map. Return `false` to break the loop.\n  forEach(iterator) {\n    // don't use _.each, because we can't break out of it.\n    for (let [key, value] of this._map){\n      const breakIfFalse = iterator.call(\n        null,\n        value,\n        this._idParse(key)\n      );\n      if (breakIfFalse === false) {\n        return;\n      }\n    }\n  }\n\n  size() {\n    return this._map.size;\n  }\n\n  setDefault(id, def) {\n    const key = this._idStringify(id);\n    if (this._map.has(key)) {\n      return this._map.get(key);\n    }\n    this._map.set(key, def);\n    return def;\n  }\n\n  // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n  clone() {\n    const clone = new IdMap(this._idStringify, this._idParse);\n    // copy directly to avoid stringify/parse overhead\n    this._map.forEach(function(value, key){\n      clone._map.set(key, EJSON.clone(value));\n    });\n    return clone;\n  }\n}\n"]}}]