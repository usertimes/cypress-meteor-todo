{"version":3,"sources":["meteor://ðŸ’»app/packages/accounts-base/client_main.js","meteor://ðŸ’»app/packages/accounts-base/accounts_client.js","meteor://ðŸ’»app/packages/accounts-base/accounts_common.js"],"names":["module","export","Accounts","AccountsClient","AccountsTest","default","exports","link","v","Meteor","users","_objectSpread","AccountsCommon","constructor","options","_loggingIn","ReactiveVar","_loggingOut","_loginServicesHandle","connection","subscribe","_pageLoadLoginCallbacks","_pageLoadLoginAttemptInfo","savedHash","window","location","hash","_initUrlMatching","_initLocalStorage","_loginFuncs","userId","_setLoggingIn","x","set","loggingIn","get","loggingOut","registerClientLoginFunction","funcName","func","Error","callLoginFunction","funcArgs","apply","applyLoginFunction","logout","callback","wait","error","result","makeClientLoggedOut","logoutOtherClients","err","_storeLoginToken","token","tokenExpires","callLoginMethod","methodName","methodArguments","_suppressLoggingIn","forEach","f","called","loginCallbacks","loginDetails","_onLoginHook","each","_onLoginFailureHook","userCallback","reconnected","onResultReceived","_reconnectStopper","stop","DDP","onReconnect","conn","storedToken","_storedLoginToken","_storedLoginTokenExpires","_tokenExpiration","Date","_tokenExpiresSoon","resume","storedTokenNow","loggedInAndDataReadyCallback","validateResult","e","makeClientLoggedIn","id","type","_userId","_onLogoutHook","_unstoreLoginToken","setUserId","loginServicesConfigured","ready","onPageLoadLogin","push","_pageLoadLogin","attemptInfo","_debug","_startupCallback","setTimeout","loginWithToken","_enableAutoLogin","_autoLoginEnabled","_pollStoredLoginToken","_isolateLoginTokenForTest","LOGIN_TOKEN_KEY","Random","USER_ID_KEY","_localStorage","setItem","LOGIN_TOKEN_EXPIRES_KEY","_lastLoginTokenWhenPolled","removeItem","getItem","_storedUserId","_unstoreLoginTokenIfExpiresSoon","rootUrlPathPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","namespace","_stream","rawUrl","allowed","_pollIntervalTimer","clearInterval","setInterval","currentLoginToken","_accountsCallbacks","_attemptToMatchHash","attemptToMatchHash","defaultSuccessHandler","onResetPasswordLink","onEmailVerificationLink","onEnrollmentLink","Package","blaze","Template","Blaze","registerHelper","user","urlPart","startup","accounts","success","tokenRegex","RegExp","match","_resetPasswordToken","_verifyEmailToken","_enrollAccountToken","call","EXPIRE_TOKENS_INTERVAL_MS","CONNECTION_CLOSE_DELAY_MS","_options","undefined","_initConnection","Mongo","Collection","_preventAutopublish","Hook","bindEnvironment","debugPrintExceptions","DEFAULT_LOGIN_EXPIRATION_DAYS","LOGIN_UNEXPIRING_TOKEN_DAYS","lceName","LoginCancelledError","makeErrorType","description","message","prototype","name","numericError","ServiceConfiguration","loginServiceConfiguration","configurations","ConfigError","_addDefaultFieldSelector","defaultFieldSelector","fields","keys","Object","length","keys2","findOne","config","isServer","accountsConfigCalled","hasOwnProperty","isClient","OAuthEncryption","loadKey","oauthSecretKey","VALID_KEYS","key","includes","onLogin","ret","register","onLoginFailure","onLogout","ddpUrl","connect","ACCOUNTS_CONNECTION_URL","_getTokenLifetimeMs","loginExpirationInDays","loginExpiration","_getPasswordResetTokenLifetimeMs","passwordResetTokenExpiration","passwordResetTokenExpirationInDays","DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS","_getPasswordEnrollTokenLifetimeMs","passwordEnrollTokenExpiration","passwordEnrollTokenExpirationInDays","DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS","when","getTime","minLifetimeMs","minLifetimeCapMs","MIN_TOKEN_LIFETIME_CAP_SECS"],"mappings":"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","file":"/packages/accounts-base.js","sourcesContent":["import {\n  AccountsClient,\n  AccountsTest,\n} from \"./accounts_client.js\";\n\n/**\n * @namespace Accounts\n * @summary The namespace for all client-side accounts-related methods.\n */\nAccounts = new AccountsClient();\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n */\nMeteor.users = Accounts.users;\n\nexport {\n  Accounts,\n  AccountsClient,\n  AccountsTest,\n  // For backwards compatibility. Note that exporting an object as the\n  // default export is *not* the same as exporting its properties as named\n  // exports, as was previously assumed.\n  exports as default,\n};\n","import {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` object on the client.\n * @locus Client\n * @class AccountsClient\n * @extends AccountsCommon\n * @instancename accountsClient\n * @param {Object} options an object with fields:\n * @param {Object} options.connection Optional DDP connection to reuse.\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.\n */\nexport class AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n\n    this._loggingIn = new ReactiveVar(false);\n    this._loggingOut = new ReactiveVar(false);\n\n    this._loginServicesHandle =\n      this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n\n    this.savedHash = window.location.hash;\n    this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    this._initLocalStorage();\n\n    // This is for .registerClientLoginFunction & .callLoginFunction.\n    this._loginFuncs = {};\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  userId() {\n    return this.connection.userId();\n  }\n\n  // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  _setLoggingIn(x) {\n    this._loggingIn.set(x);\n  }\n\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingIn() {\n    return this._loggingIn.get();\n  }\n\n  /**\n   * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingOut() {\n    return this._loggingOut.get();\n  }\n\n  /**\n   * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n   `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n   * @locus Client\n   * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n   Should be the OAuth provider name accordingly.\n   * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n   */\n  registerClientLoginFunction(funcName, func) {\n    if (this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} has been defined already`);\n    }\n    this._loginFuncs[funcName] = func;\n  }\n\n  /**\n   * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n   arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n   all arguments for the login function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   */\n  callLoginFunction(funcName, ...funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n   function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   * @param {Array} funcArgs The `arguments` for the login function.\n   */\n  applyLoginFunction(funcName, funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logout(callback) {\n    this._loggingOut.set(true);\n    this.connection.apply('logout', [], {\n      wait: true\n    }, (error, result) => {\n      this._loggingOut.set(false);\n      if (error) {\n        callback && callback(error);\n      } else {\n        this.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logoutOtherClients(callback) {\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    this.connection.apply(\n      'getNewToken',\n      [],\n      { wait: true },\n      (err, result) => {\n        if (! err) {\n          this._storeLoginToken(\n            this.userId(),\n            result.token,\n            result.tokenExpires\n          );\n        }\n      }\n    );\n\n    this.connection.apply(\n      'removeOtherTokens',\n      [],\n      { wait: true },\n      err => callback && callback(err)\n    );\n  }\n\n  ///\n  /// LOGIN METHODS\n  ///\n\n  // Call a login method on the server.\n  //\n  // A login method is a method which on success calls `this.setUserId(id)` and\n  // `Accounts._setLoginToken` on the server and returns an object with fields\n  // 'id' (containing the user id), 'token' (containing a resume token), and\n  // optionally `tokenExpires`.\n  //\n  // This function takes care of:\n  //   - Updating the Meteor.loggingIn() reactive data source\n  //   - Calling the method in 'wait' mode\n  //   - On success, saving the resume token to localStorage\n  //   - On success, calling Accounts.connection.setUserId()\n  //   - Setting up an onReconnect handler which logs in with\n  //     the resume token\n  //\n  // Options:\n  // - methodName: The method to call (default 'login')\n  // - methodArguments: The arguments for the method\n  // - validateResult: If provided, will be called with the result of the\n  //                 method. If it throws, the client will not be logged in (and\n  //                 its error will be passed to the callback).\n  // - userCallback: Will be called with no arguments once the user is fully\n  //                 logged in, or with the error on error.\n  //\n  callLoginMethod(options) {\n    options = { \n      methodName: 'login',\n      methodArguments: [{}],\n      _suppressLoggingIn: false,\n      ...options,\n    };\n\n    // Set defaults for callback arguments to no-op functions; make sure we\n    // override falsey values too.\n    ['validateResult', 'userCallback'].forEach(f => {\n      if (!options[f])\n        options[f] = () => null;\n    })\n\n    // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n    let called;\n    const loginCallbacks = ({ error, loginDetails }) => {\n      if (!called) {\n        called = true;\n        if (!error) {\n          this._onLoginHook.each(callback => {\n            callback(loginDetails);\n            return true;\n          });\n        } else {\n          this._onLoginFailureHook.each(callback => {\n            callback({ error });\n            return true;\n          });\n        }\n        options.userCallback(error, loginDetails);\n      }\n    }\n\n    let reconnected = false;\n\n    // We want to set up onReconnect as soon as we get a result token back from\n    // the server, without having to wait for subscriptions to rerun. This is\n    // because if we disconnect and reconnect between getting the result and\n    // getting the results of subscription rerun, we WILL NOT re-send this\n    // method (because we never re-send methods whose results we've received)\n    // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n    // time. This will lead to makeClientLoggedIn(result.id) even though we\n    // haven't actually sent a login method!\n    //\n    // But by making sure that we send this \"resume\" login in that case (and\n    // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n    // client-side userId. (It's important that livedata_connection guarantees\n    // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n    // will occur before the callback from the resume login call.)\n    const onResultReceived = (err, result) => {\n      if (err || !result || !result.token) {\n        // Leave onReconnect alone if there was an error, so that if the user was\n        // already logged in they will still get logged in on reconnect.\n        // See issue #4970.\n      } else {\n        // First clear out any previously set Acccounts login onReconnect\n        // callback (to make sure we don't keep piling up duplicate callbacks,\n        // which would then all be triggered when reconnecting).\n        if (this._reconnectStopper) {\n          this._reconnectStopper.stop();\n        }\n\n        this._reconnectStopper = DDP.onReconnect(conn => {\n          if (conn != this.connection) {\n            return;\n          }\n          reconnected = true;\n          // If our token was updated in storage, use the latest one.\n          const storedToken = this._storedLoginToken();\n          if (storedToken) {\n            result = {\n              token: storedToken,\n              tokenExpires: this._storedLoginTokenExpires()\n            };\n          }\n          if (!result.tokenExpires)\n            result.tokenExpires = this._tokenExpiration(new Date());\n          if (this._tokenExpiresSoon(result.tokenExpires)) {\n            this.makeClientLoggedOut();\n          } else {\n            this.callLoginMethod({\n              methodArguments: [{resume: result.token}],\n              // Reconnect quiescence ensures that the user doesn't see an\n              // intermediate state before the login method finishes. So we don't\n              // need to show a logging-in animation.\n              _suppressLoggingIn: true,\n              userCallback: (error, loginDetails) => {\n                const storedTokenNow = this._storedLoginToken();\n                if (error) {\n                  // If we had a login error AND the current stored token is the\n                  // one that we tried to log in with, then declare ourselves\n                  // logged out. If there's a token in storage but it's not the\n                  // token that we tried to log in with, we don't know anything\n                  // about whether that token is valid or not, so do nothing. The\n                  // periodic localStorage poll will decide if we are logged in or\n                  // out with this token, if it hasn't already. Of course, even\n                  // with this check, another tab could insert a new valid token\n                  // immediately before we clear localStorage here, which would\n                  // lead to both tabs being logged out, but by checking the token\n                  // in storage right now we hope to make that unlikely to happen.\n                  //\n                  // If there is no token in storage right now, we don't have to\n                  // do anything; whatever code removed the token from storage was\n                  // responsible for calling `makeClientLoggedOut()`, or the\n                  // periodic localStorage poll will call `makeClientLoggedOut`\n                  // eventually if another tab wiped the token from storage.\n                  if (storedTokenNow && storedTokenNow === result.token) {\n                    this.makeClientLoggedOut();\n                  }\n                }\n                // Possibly a weird callback to call, but better than nothing if\n                // there is a reconnect between \"login result received\" and \"data\n                // ready\".\n                loginCallbacks({ error, loginDetails });\n              }});\n          }\n        });\n      }\n    };\n\n    // This callback is called once the local cache of the current-user\n    // subscription (and all subscriptions, in fact) are guaranteed to be up to\n    // date.\n    const loggedInAndDataReadyCallback = (error, result) => {\n      // If the login method returns its result but the connection is lost\n      // before the data is in the local cache, it'll set an onReconnect (see\n      // above). The onReconnect will try to log in using the token, and *it*\n      // will call userCallback via its own version of this\n      // loggedInAndDataReadyCallback. So we don't have to do anything here.\n      if (reconnected)\n        return;\n\n      // Note that we need to call this even if _suppressLoggingIn is true,\n      // because it could be matching a _setLoggingIn(true) from a\n      // half-completed pre-reconnect login method.\n      this._setLoggingIn(false);\n      if (error || !result) {\n        error = error || new Error(\n          `No result from call to ${options.methodName}`\n        );\n        loginCallbacks({ error });\n        return;\n      }\n      try {\n        options.validateResult(result);\n      } catch (e) {\n        loginCallbacks({ error: e });\n        return;\n      }\n\n      // Make the client logged in. (The user data should already be loaded!)\n      this.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n      loginCallbacks({ loginDetails: { type: result.type } });\n    };\n\n    if (!options._suppressLoggingIn) {\n      this._setLoggingIn(true);\n    }\n    this.connection.apply(\n      options.methodName,\n      options.methodArguments,\n      { wait: true, onResultReceived: onResultReceived },\n      loggedInAndDataReadyCallback);\n  }\n\n  makeClientLoggedOut() {\n    // Ensure client was successfully logged in before running logout hooks.\n    if (this.connection._userId) {\n      this._onLogoutHook.each(callback => {\n        callback();\n        return true;\n      });\n    }\n    this._unstoreLoginToken();\n    this.connection.setUserId(null);\n    this._reconnectStopper && this._reconnectStopper.stop();\n  }\n  \n  makeClientLoggedIn(userId, token, tokenExpires) {\n    this._storeLoginToken(userId, token, tokenExpires);\n    this.connection.setUserId(userId);\n  }\n\n  ///\n  /// LOGIN SERVICES\n  ///\n\n  // A reactive function returning whether the loginServiceConfiguration\n  // subscription is ready. Used by accounts-ui to hide the login button\n  // until we have all the configuration loaded\n  //\n  loginServicesConfigured() {\n    return this._loginServicesHandle.ready();\n  };\n\n  // Some login services such as the redirect login flow or the resume\n  // login handler can log the user in at page load time.  The\n  // Meteor.loginWithX functions have a callback argument, but the\n  // callback function instance won't be in memory any longer if the\n  // page was reloaded.  The `onPageLoadLogin` function allows a\n  // callback to be registered for the case where the login was\n  // initiated in a previous VM, and we now have the result of the login\n  // attempt in a new VM.\n\n  // Register a callback to be called if we have information about a\n  // login attempt at page load time.  Call the callback immediately if\n  // we already have the page load login attempt info, otherwise stash\n  // the callback to be called if and when we do get the attempt info.\n  //\n  onPageLoadLogin(f) {\n    if (this._pageLoadLoginAttemptInfo) {\n      f(this._pageLoadLoginAttemptInfo);\n    } else {\n      this._pageLoadLoginCallbacks.push(f);\n    }\n  };\n\n  // Receive the information about the login attempt at page load time.\n  // Call registered callbacks, and also record the info in case\n  // someone's callback hasn't been registered yet.\n  //\n  _pageLoadLogin(attemptInfo) {\n    if (this._pageLoadLoginAttemptInfo) {\n      Meteor._debug(\n        'Ignoring unexpected duplicate page load login attempt info'\n      );\n      return;\n    }\n\n    this._pageLoadLoginCallbacks.forEach(callback => callback(attemptInfo));\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = attemptInfo;\n  }\n\n  // _startupCallback executes on onLogin callbacks\n  // at registration time if already logged in\n  // this can happen when new AccountsClient is created\n  // before callbacks are registered see #10157\n  _startupCallback(callback) {\n    // Are we already logged in?\n    if (this.connection._userId) {\n      // If already logged in before handler is registered, it's safe to\n      // assume type is a 'resume', so we execute the callback at the end\n      // of the queue so that Meteor.startup can complete before any\n      // embedded onLogin callbacks would execute.\n      Meteor.setTimeout(() => callback({ type: 'resume' }), 0);\n    }\n  }\n\n  ///\n  /// LOGIN TOKENS\n  ///\n\n  // These methods deal with storing a login token and user id in the\n  // browser's localStorage facility. It polls local storage every few\n  // seconds to synchronize login state between multiple tabs in the same\n  // browser.\n\n  loginWithToken(token, callback) {\n    this.callLoginMethod({\n      methodArguments: [{\n        resume: token\n      }],\n      userCallback: callback\n    });\n  };\n\n  // Semi-internal API. Call this function to re-enable auto login after\n  // if it was disabled at startup.\n  _enableAutoLogin() {\n    this._autoLoginEnabled = true;\n    this._pollStoredLoginToken();\n  };\n\n  ///\n  /// STORING\n  ///\n\n  // Call this from the top level of the test file for any test that does\n  // logging in and out, to protect multiple tabs running the same tests\n  // simultaneously from interfering with each others' localStorage.\n  _isolateLoginTokenForTest() {\n    this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n    this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n  };\n\n  _storeLoginToken(userId, token, tokenExpires) {\n    Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n    if (! tokenExpires)\n      tokenExpires = this._tokenExpiration(new Date());\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n    // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n    this._lastLoginTokenWhenPolled = token;\n  };\n\n  _unstoreLoginToken() {\n    Meteor._localStorage.removeItem(this.USER_ID_KEY);\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n    // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n    this._lastLoginTokenWhenPolled = null;\n  };\n\n  // This is private, but it is exported for now because it is used by a\n  // test in accounts-password.\n  _storedLoginToken() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n  };\n\n  _storedLoginTokenExpires() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n  };\n\n  _storedUserId() {\n    return Meteor._localStorage.getItem(this.USER_ID_KEY);\n  };\n\n  _unstoreLoginTokenIfExpiresSoon() {\n    const tokenExpires = this._storedLoginTokenExpires();\n    if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n      this._unstoreLoginToken();\n    }\n  };\n\n  ///\n  /// AUTO-LOGIN\n  ///\n\n  _initLocalStorage() {\n    // Key names to use in localStorage\n    this.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n    this.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n    this.USER_ID_KEY = \"Meteor.userId\";\n\n    const rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n    if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n      // We want to keep using the same keys for existing apps that do not\n      // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n      // to log in again after an app updates to a version of Meteor that\n      // contains this code, but it's generally preferable to namespace the\n      // keys so that connections from distinct apps to distinct DDP URLs\n      // will be distinct in Meteor._localStorage.\n      let namespace = `:${this.connection._stream.rawUrl}`;\n      if (rootUrlPathPrefix) {\n        namespace += `:${rootUrlPathPrefix}`;\n      }\n      this.LOGIN_TOKEN_KEY += namespace;\n      this.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n      this.USER_ID_KEY += namespace;\n    }\n\n    let token;\n    if (this._autoLoginEnabled) {\n      // Immediately try to log in via local storage, so that any DDP\n      // messages are sent after we have established our user account\n      this._unstoreLoginTokenIfExpiresSoon();\n      token = this._storedLoginToken();\n      if (token) {\n        // On startup, optimistically present us as logged in while the\n        // request is in flight. This reduces page flicker on startup.\n        const userId = this._storedUserId();\n        userId && this.connection.setUserId(userId);\n        this.loginWithToken(token, err => {\n          if (err) {\n            Meteor._debug(`Error logging in with token: ${err}`);\n            this.makeClientLoggedOut();\n          }\n\n          this._pageLoadLogin({\n            type: \"resume\",\n            allowed: !err,\n            error: err,\n            methodName: \"login\",\n            // XXX This is duplicate code with loginWithToken, but\n            // loginWithToken can also be called at other times besides\n            // page load.\n            methodArguments: [{resume: token}]\n          });\n        });\n      }\n    }\n\n    // Poll local storage every 3 seconds to login if someone logged in in\n    // another tab\n    this._lastLoginTokenWhenPolled = token;\n\n    if (this._pollIntervalTimer) {\n      // Unlikely that _initLocalStorage will be called more than once for\n      // the same AccountsClient instance, but just in case...\n      clearInterval(this._pollIntervalTimer);\n    }\n\n    this._pollIntervalTimer = setInterval(() => {\n      this._pollStoredLoginToken();\n    }, 3000);\n  };\n\n  _pollStoredLoginToken() {\n    if (! this._autoLoginEnabled) {\n      return;\n    }\n\n    const currentLoginToken = this._storedLoginToken();\n\n    // != instead of !== just to make sure undefined and null are treated the same\n    if (this._lastLoginTokenWhenPolled != currentLoginToken) {\n      if (currentLoginToken) {\n        this.loginWithToken(currentLoginToken, (err) => {\n          if (err) {\n            this.makeClientLoggedOut();\n          }\n        });\n      } else {\n        this.logout();\n      }\n    }\n\n    this._lastLoginTokenWhenPolled = currentLoginToken;\n  };\n\n  ///\n  /// URLS\n  ///\n\n  _initUrlMatching() {\n    // By default, allow the autologin process to happen.\n    this._autoLoginEnabled = true;\n  \n    // We only support one callback per URL.\n    this._accountsCallbacks = {};\n  \n    // Try to match the saved value of window.location.hash.\n    this._attemptToMatchHash();\n  };\n  \n  // Separate out this functionality for testing\n  _attemptToMatchHash() {\n    attemptToMatchHash(this, this.savedHash, defaultSuccessHandler);\n  };\n\n  /**\n   * @summary Register a function to call when a reset password link is clicked\n   * in an email sent by\n   * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onResetPasswordLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword).\n   * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n   * login process is suspended until this function is called, so that the\n   * password for user A can be reset even if user B was logged in.\n   * @locus Client\n   */\n  onResetPasswordLink(callback) {\n    if (this._accountsCallbacks[\"reset-password\"]) {\n      Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"reset-password\"] = callback;\n  };\n\n  /**\n   * @summary Register a function to call when an email verification link is\n   * clicked in an email sent by\n   * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEmailVerificationLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: An email verification token that can be passed to\n   * [`Accounts.verifyEmail`](#accounts_verifyemail).\n   * 2. `done`: A function to call when the email verification UI flow is complete.\n   * The normal login process is suspended until this function is called, so\n   * that the user can be notified that they are verifying their email before\n   * being logged in.\n   * @locus Client\n   */\n  onEmailVerificationLink(callback) {\n    if (this._accountsCallbacks[\"verify-email\"]) {\n      Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"verify-email\"] = callback;\n  };\n\n  /**\n   * @summary Register a function to call when an account enrollment link is\n   * clicked in an email sent by\n   * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEnrollmentLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n   * enrolled account a password.\n   * 2. `done`: A function to call when the enrollment UI flow is complete.\n   * The normal login process is suspended until this function is called, so that\n   * user A can be enrolled even if user B was logged in.\n   * @locus Client\n   */\n  onEnrollmentLink(callback) {\n    if (this._accountsCallbacks[\"enroll-account\"]) {\n      Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"enroll-account\"] = callback;\n  };\n\n};\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`, \n * `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in \n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = () => Accounts.loggingIn();\n\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in \n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingOut = () => Accounts.loggingOut();\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = callback => Accounts.logout(callback);\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = callback => Accounts.logoutOtherClients(callback);\n\n/**\n * @summary Login with a Meteor access token.\n * @locus Client\n * @param {Object} [token] Local storage token for use with login across \n * multiple tabs in the same browser.\n * @param {Function} [callback] Optional callback. Called with no arguments on\n * success.\n * @importFromPackage meteor\n */\nMeteor.loginWithToken = (token, callback) =>\n  Accounts.loginWithToken(token, callback);\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  const { Template } = Package.blaze.Blaze;\n\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Template.registerHelper('currentUser', () => Meteor.user());\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Template.registerHelper('loggingIn', () => Meteor.loggingIn());\n\n  /**\n   * @global\n   * @name  loggingOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper('loggingOut', () => Meteor.loggingOut());\n\n  /**\n   * @global\n   * @name  loggingInOrOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper(\n    'loggingInOrOut', \n    () => Meteor.loggingIn() || Meteor.loggingOut()\n  );\n}\n\nconst defaultSuccessHandler = function(token, urlPart) {\n  // put login in a suspended state to wait for the interaction to finish\n  this._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(() => {\n    // if a callback has been registered for this kind of token, call it\n    if (this._accountsCallbacks[urlPart]) {\n      this._accountsCallbacks[urlPart](token, () => this._enableAutoLogin());\n    }\n  });\n}\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nconst attemptToMatchHash = (accounts, hash, success) => {\n  // All of the special hash URLs we support for accounts interactions\n  [\"reset-password\", \"verify-email\", \"enroll-account\"].forEach(urlPart => {\n    let token;\n\n    const tokenRegex = new RegExp(`^\\\\#\\\\/${urlPart}\\\\/(.*)$`);\n    const match = hash.match(tokenRegex);\n\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n}\n\n// Export for testing\nexport const AccountsTest = {\n  attemptToMatchHash: (hash, success) => \n    attemptToMatchHash(Accounts, hash, success),\n};\n","/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogout callback\"\n    });\n\n    // Expose for testing.\n    this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n    this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS;\n\n    // Thrown when the user cancels the login process (eg, closes an oauth\n    // popup, declines retina scan, etc)\n    const lceName = 'Accounts.LoginCancelledError';\n    this.LoginCancelledError = Meteor.makeErrorType(\n      lceName,\n      function (description) {\n        this.message = description;\n      }\n    );\n    this.LoginCancelledError.prototype.name = lceName;\n\n    // This is used to transmit specific subclass errors over the wire. We\n    // should come up with a more generic way to do this (eg, with some sort of\n    // symbolic error code rather than a number).\n    this.LoginCancelledError.numericError = 0x8acdc2f;\n\n    // loginServiceConfiguration and ConfigError are maintained for backwards compatibility\n    Meteor.startup(() => {\n      const { ServiceConfiguration } = Package['service-configuration'];\n      this.loginServiceConfiguration = ServiceConfiguration.configurations;\n      this.ConfigError = ServiceConfiguration.ConfigError;\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  // merge the defaultFieldSelector with an existing options object\n  _addDefaultFieldSelector(options = {}) {\n    // this will be the most common case for most people, so make it quick\n    if (!this._options.defaultFieldSelector) return options;\n\n    // if no field selector then just use defaultFieldSelector\n    if (!options.fields) return {\n      ...options,\n      fields: this._options.defaultFieldSelector,\n    };\n\n    // if empty field selector then the full user object is explicitly requested, so obey\n    const keys = Object.keys(options.fields);\n    if (!keys.length) return options;\n\n    // if the requested fields are +ve then ignore defaultFieldSelector\n    // assume they are all either +ve or -ve because Mongo doesn't like mixed\n    if (!!options.fields[keys[0]]) return options;\n\n    // The requested fields are -ve.\n    // If the defaultFieldSelector is +ve then use requested fields, otherwise merge them\n    const keys2 = Object.keys(this._options.defaultFieldSelector);\n    return this._options.defaultFieldSelector[keys2[0]] ? options : {\n      ...options,\n      fields: {\n        ...options.fields,\n        ...this._options.defaultFieldSelector,\n      }\n    }\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  user(options) {\n    const userId = this.userId();\n    return userId ? this.users.findOne(userId, this._addDefaultFieldSelector(options)) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {Number} options.loginExpiration The number of milliseconds from when a user logs in until their token expires and they are logged out, for a more granular control. If `loginExpirationInDays` is set, it takes precedent.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specified on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordResetTokenExpiration The number of milliseconds from when a link to reset password is sent until token expires and user can't reset password with the link anymore. If `passwordResetTokenExpirationInDays` is set, it takes precedent.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set initial password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Number} options.passwordEnrollTokenExpiration The number of milliseconds from when a link to set initial password is sent until token expires and user can't set password with the link anymore. If `passwordEnrollTokenExpirationInDays` is set, it takes precedent.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   * @param {MongoFieldSpecifier} options.defaultFieldSelector To exclude by default large custom fields from `Meteor.user()` and `Meteor.findUserBy...()` functions when called without a field selector, and all `onLogin`, `onLoginFailure` and `onLogout` callbacks.  Example: `Accounts.config({ defaultFieldSelector: { myBigArray: 0 }})`.\n   */\n  config(options) {\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {\n      if (Meteor.isClient) {\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      }\n      if (! Package[\"oauth-encryption\"]) {\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      }\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = { ...options };\n      delete options.oauthSecretKey;\n    }\n\n    // validate option keys\n    const VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"passwordEnrollTokenExpiration\",\n                      \"passwordEnrollTokenExpirationInDays\", \"restrictCreationByEmailDomain\", \"loginExpirationInDays\",\n                      \"loginExpiration\", \"passwordResetTokenExpirationInDays\", \"passwordResetTokenExpiration\",\n                      \"ambiguousErrorMessages\", \"bcryptRounds\", \"defaultFieldSelector\"];\n\n    Object.keys(options).forEach(key => {\n      if (!VALID_KEYS.includes(key)) {\n        throw new Error(`Accounts.config: Invalid key: ${key}`);\n      }\n    });\n\n    // set values in Accounts._options\n    VALID_KEYS.forEach(key => {\n      if (key in options) {\n        if (key in this._options) {\n          throw new Error(`Can't set \\`${key}\\` more than once`);\n        }\n        this._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n  onLogin(func) {\n    let ret = this._onLoginHook.register(func);\n    // call the just registered callback if already logged in\n    this._startupCallback(ret.callback);\n    return ret;\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    // When loginExpirationInDays is set to null, we'll use a really high\n    // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n    // unexpiring token.\n    const loginExpirationInDays =\n      (this._options.loginExpirationInDays === null)\n        ? LOGIN_UNEXPIRING_TOKEN_DAYS\n        : this._options.loginExpirationInDays;\n    return this._options.loginExpiration || (loginExpirationInDays\n        || DEFAULT_LOGIN_EXPIRATION_DAYS) * 86400000;\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n    return this._options.passwordResetTokenExpiration || (this._options.passwordResetTokenExpirationInDays ||\n            DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 86400000;\n  }\n\n  _getPasswordEnrollTokenLifetimeMs() {\n    return this._options.passwordEnrollTokenExpiration || (this._options.passwordEnrollTokenExpirationInDays ||\n        DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 86400000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    let minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    const minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs) {\n      minLifetimeMs = minLifetimeCapMs;\n    }\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n\n  // No-op on the server, overridden on the client.\n  _startupCallback(callback) {}\n}\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = () => Accounts.userId();\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.user = (options) => Accounts.user(options);\n\n// how long (in days) until a login token expires\nconst DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// how long (in days) until reset password token expires\nconst DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nconst DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nconst MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nexport const EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nexport const CONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nconst LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;\n"]}