{"version":3,"sources":["meteor://ðŸ’»app/packages/mongo-id/id.js"],"names":["_typeof","module","link","default","v","export","MongoID","EJSON","Random","_looksLikeObjectID","str","length","match","ObjectID","hexString","toLowerCase","Error","_str","equals","other","valueOf","toString","clone","typeName","getTimestamp","Number","parseInt","substr","toJSONValue","toHexString","addType","idStringify","id","firstChar","charAt","undefined","JSON","stringify","idParse","parse"],"mappings":"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","file":"/packages/mongo-id.js","sourcesContent":["import { EJSON } from 'meteor/ejson';\nimport { Random } from 'meteor/random';\n\nconst MongoID = {};\n\nMongoID._looksLikeObjectID = str => str.length === 24 && str.match(/^[0-9a-f]*$/);\n\nMongoID.ObjectID = class ObjectID {\n  constructor (hexString) {\n    //random-based impl of Mongo ObjectID\n    if (hexString) {\n      hexString = hexString.toLowerCase();\n      if (!MongoID._looksLikeObjectID(hexString)) {\n        throw new Error('Invalid hexadecimal string for creating an ObjectID');\n      }\n      // meant to work with _.isEqual(), which relies on structural equality\n      this._str = hexString;\n    } else {\n      this._str = Random.hexString(24);\n    }\n  }\n\n  equals(other) {\n    return other instanceof MongoID.ObjectID &&\n    this.valueOf() === other.valueOf();\n  }\n\n  toString() {\n    return `ObjectID(\"${this._str}\")`;\n  }\n\n  clone() {\n    return new MongoID.ObjectID(this._str);\n  }\n\n  typeName() {\n    return 'oid';\n  }\n\n  getTimestamp() {\n    return Number.parseInt(this._str.substr(0, 8), 16);\n  }\n\n  valueOf() {\n    return this._str;\n  }\n\n  toJSONValue() {\n    return this.valueOf();\n  }\n\n  toHexString() {\n    return this.valueOf();\n  }\n\n}\n\nEJSON.addType('oid', str => new MongoID.ObjectID(str));\n\nMongoID.idStringify = (id) => {\n  if (id instanceof MongoID.ObjectID) {\n    return id.valueOf();\n  } else if (typeof id === 'string') {\n    var firstChar = id.charAt(0);\n    if (id === '') {\n      return id;\n    } else if (firstChar === '-' || // escape previously dashed strings\n               firstChar === '~' || // escape escaped numbers, true, false\n               MongoID._looksLikeObjectID(id) || // escape object-id-form strings\n               firstChar === '{') { // escape object-form strings, for maybe implementing later\n      return `-${id}`;\n    } else {\n      return id; // other strings go through unchanged.\n    }\n  } else if (id === undefined) {\n    return '-';\n  } else if (typeof id === 'object' && id !== null) {\n    throw new Error('Meteor does not currently support objects other than ObjectID as ids');\n  } else { // Numbers, true, false, null\n    return `~${JSON.stringify(id)}`;\n  }\n};\n\nMongoID.idParse = (id) => {\n  var firstChar = id.charAt(0);\n  if (id === '') {\n    return id;\n  } else if (id === '-') {\n    return undefined;\n  } else if (firstChar === '-') {\n    return id.substr(1);\n  } else if (firstChar === '~') {\n    return JSON.parse(id.substr(1));\n  } else if (MongoID._looksLikeObjectID(id)) {\n    return new MongoID.ObjectID(id);\n  } else {\n    return id;\n  }\n};\n\nexport { MongoID };\n"]}