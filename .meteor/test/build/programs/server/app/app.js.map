{"version":3,"sources":["meteor://ğŸ’»app/imports/api/tasksMethods.js","meteor://ğŸ’»app/imports/api/tasksPublications.js","meteor://ğŸ’»app/imports/db/TasksCollection.js","meteor://ğŸ’»app/server/coverage.js","meteor://ğŸ’»app/server/main.js"],"names":["Meteor","check","TasksCollection","createdAt","userId","task","_id","$set","isChecked","Mongo","babelEnvironment","isCypress","window","ROUTE_COVERAGE","WebApp","result","coverage","global","__coverage__","res","JSON","insertTask","text","user","SEED_USERNAME","SEED_PASSWORD","Accounts","username","password","taskText"],"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","file":"/app.js","sourcesContent":["import { check } from 'meteor/check';\nimport { TasksCollection } from '/imports/db/TasksCollection';\n\nMeteor.methods({\n  'tasks.insert'(text) {\n    check(text, String);\n\n    if (!this.userId) {\n      throw new Meteor.Error('Not authorized.');\n    }\n\n    TasksCollection.insert({\n      text,\n      createdAt: new Date(),\n      userId: this.userId,\n    });\n  },\n\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n\n    if (!this.userId) {\n      throw new Meteor.Error('Not authorized.');\n    }\n\n    const task = TasksCollection.findOne({ _id: taskId, userId: this.userId });\n\n    if (!task) {\n      throw new Meteor.Error('Access denied.');\n    }\n\n    TasksCollection.remove(taskId);\n  },\n\n  'tasks.setIsChecked'(taskId, isChecked) {\n    check(taskId, String);\n    check(isChecked, Boolean);\n\n    if (!this.userId) {\n      throw new Meteor.Error('Not authorized.');\n    }\n\n    const task = TasksCollection.findOne({ _id: taskId, userId: this.userId });\n\n    if (!task) {\n      throw new Meteor.Error('Access denied.');\n    }\n\n    TasksCollection.update(taskId, {\n      $set: {\n        isChecked,\n      },\n    });\n  },\n});\n","import { Meteor } from 'meteor/meteor';\nimport { TasksCollection } from '/imports/db/TasksCollection';\n\nMeteor.publish('tasks', function publishTasks() {\n  return TasksCollection.find({ userId: this.userId });\n});\n","import { Mongo } from 'meteor/mongo';\n\nexport const TasksCollection = new Mongo.Collection('tasks');\n","import { Meteor } from 'meteor/meteor';\nimport { WebApp } from 'meteor/webapp';\n\n// Check `BABEL_ENV` to check if we are running in test mode.\nconst babelEnvironment = process.env.BABEL_ENV || 'development';\n// Detect if we are running in a test environment.\nconst isCypress =\n  (typeof window !== 'undefined' && window.Cypress !== undefined) ||\n  babelEnvironment === 'test';\n\n// Expose a route so that Cypress can fetch the coverage report for the\n// server-side code. This route has to be configured in `cypress.json` in\n// `env.codeCoverage.url`.\nconst ROUTE_COVERAGE = '/__coverage__';\n\nif (isCypress && Meteor.isServer) {\n  WebApp.connectHandlers.use(ROUTE_COVERAGE, (req, res) => {\n    const result = { coverage: global.__coverage__ };\n    res.writeHead(200, {'Content-Type': 'application/json'});\n    res.end(JSON.stringify(result));\n  });\n}\n\n","import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { TasksCollection } from '/imports/db/TasksCollection';\nimport '/imports/api/tasksMethods';\nimport '/imports/api/tasksPublications';\nimport './coverage';\n\nconst insertTask = (taskText, user) =>\n  TasksCollection.insert({\n    text: taskText,\n    userId: user._id,\n    createdAt: new Date(),\n  });\n\nconst SEED_USERNAME = 'usertimes';\nconst SEED_PASSWORD = 'password';\n\nMeteor.startup(() => {\n  if (!Accounts.findUserByUsername(SEED_USERNAME)) {\n    Accounts.createUser({\n      username: SEED_USERNAME,\n      password: SEED_PASSWORD,\n    });\n  }\n\n  const user = Accounts.findUserByUsername(SEED_USERNAME);\n\n  if (TasksCollection.find().count() === 0) {\n    [\n      'First Task',\n      'Second Task',\n      'Third Task',\n      'Fourth Task',\n      'Fifth Task',\n      'Sixth Task',\n      'Seventh Task',\n    ].forEach((taskText) => insertTask(taskText, user));\n  }\n});\n"]}