{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/idrismahjoubi/cypress-meteor-react/packages/id-map/id-map.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/id-map/id-map.js","filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/id-map/id-map.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"test","cwd":"/Users/idrismahjoubi/cypress-meteor-react","root":"/Users/idrismahjoubi/cypress-meteor-react","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/id-map/id-map.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/id-map/id-map.js"}},"code":"module.export({\n  IdMap: () => IdMap\n});\n\nclass IdMap {\n  constructor(idStringify, idParse) {\n    this._map = new Map();\n    this._idStringify = idStringify || JSON.stringify;\n    this._idParse = idParse || JSON.parse;\n  } // Some of these methods are designed to match methods on OrderedDict, since\n  // (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n  // (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n  // set of methods that overlap between the two.)\n\n\n  get(id) {\n    const key = this._idStringify(id);\n\n    return this._map.get(key);\n  }\n\n  set(id, value) {\n    const key = this._idStringify(id);\n\n    this._map.set(key, value);\n  }\n\n  remove(id) {\n    const key = this._idStringify(id);\n\n    this._map.delete(key);\n  }\n\n  has(id) {\n    const key = this._idStringify(id);\n\n    return this._map.has(key);\n  }\n\n  empty() {\n    return this._map.size === 0;\n  }\n\n  clear() {\n    this._map.clear();\n  } // Iterates over the items in the map. Return `false` to break the loop.\n\n\n  forEach(iterator) {\n    // don't use _.each, because we can't break out of it.\n    for (let [key, value] of this._map) {\n      const breakIfFalse = iterator.call(null, value, this._idParse(key));\n\n      if (breakIfFalse === false) {\n        return;\n      }\n    }\n  }\n\n  size() {\n    return this._map.size;\n  }\n\n  setDefault(id, def) {\n    const key = this._idStringify(id);\n\n    if (this._map.has(key)) {\n      return this._map.get(key);\n    }\n\n    this._map.set(key, def);\n\n    return def;\n  } // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n\n\n  clone() {\n    const clone = new IdMap(this._idStringify, this._idParse); // copy directly to avoid stringify/parse overhead\n\n    this._map.forEach(function (value, key) {\n      clone._map.set(key, EJSON.clone(value));\n    });\n\n    return clone;\n  }\n\n}","map":{"version":3,"sources":["packages/id-map/id-map.js"],"names":["module","export","IdMap","constructor","idStringify","idParse","_map","Map","_idStringify","JSON","stringify","_idParse","parse","get","id","key","set","value","remove","delete","has","empty","size","clear","forEach","iterator","breakIfFalse","call","setDefault","def","clone","EJSON"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,KAAK,EAAC,MAAIA;AAAX,CAAd;;AACO,MAAMA,KAAN,CAAY;AACjBC,EAAAA,WAAW,CAACC,WAAD,EAAcC,OAAd,EAAuB;AAChC,SAAKC,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACA,SAAKC,YAAL,GAAoBJ,WAAW,IAAIK,IAAI,CAACC,SAAxC;AACA,SAAKC,QAAL,GAAgBN,OAAO,IAAII,IAAI,CAACG,KAAhC;AACD,GALgB,CAOnB;AACA;AACA;AACA;;;AAEEC,EAAAA,GAAG,CAACC,EAAD,EAAK;AACN,UAAMC,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAZ;;AACA,WAAO,KAAKR,IAAL,CAAUO,GAAV,CAAcE,GAAd,CAAP;AACD;;AAEDC,EAAAA,GAAG,CAACF,EAAD,EAAKG,KAAL,EAAY;AACb,UAAMF,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAZ;;AACA,SAAKR,IAAL,CAAUU,GAAV,CAAcD,GAAd,EAAmBE,KAAnB;AACD;;AAEDC,EAAAA,MAAM,CAACJ,EAAD,EAAK;AACT,UAAMC,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAZ;;AACA,SAAKR,IAAL,CAAUa,MAAV,CAAiBJ,GAAjB;AACD;;AAEDK,EAAAA,GAAG,CAACN,EAAD,EAAK;AACN,UAAMC,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAZ;;AACA,WAAO,KAAKR,IAAL,CAAUc,GAAV,CAAcL,GAAd,CAAP;AACD;;AAEDM,EAAAA,KAAK,GAAG;AACN,WAAO,KAAKf,IAAL,CAAUgB,IAAV,KAAmB,CAA1B;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,SAAKjB,IAAL,CAAUiB,KAAV;AACD,GAtCgB,CAwCjB;;;AACAC,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB;AACA,SAAK,IAAI,CAACV,GAAD,EAAME,KAAN,CAAT,IAAyB,KAAKX,IAA9B,EAAmC;AACjC,YAAMoB,YAAY,GAAGD,QAAQ,CAACE,IAAT,CACnB,IADmB,EAEnBV,KAFmB,EAGnB,KAAKN,QAAL,CAAcI,GAAd,CAHmB,CAArB;;AAKA,UAAIW,YAAY,KAAK,KAArB,EAA4B;AAC1B;AACD;AACF;AACF;;AAEDJ,EAAAA,IAAI,GAAG;AACL,WAAO,KAAKhB,IAAL,CAAUgB,IAAjB;AACD;;AAEDM,EAAAA,UAAU,CAACd,EAAD,EAAKe,GAAL,EAAU;AAClB,UAAMd,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAZ;;AACA,QAAI,KAAKR,IAAL,CAAUc,GAAV,CAAcL,GAAd,CAAJ,EAAwB;AACtB,aAAO,KAAKT,IAAL,CAAUO,GAAV,CAAcE,GAAd,CAAP;AACD;;AACD,SAAKT,IAAL,CAAUU,GAAV,CAAcD,GAAd,EAAmBc,GAAnB;;AACA,WAAOA,GAAP;AACD,GAlEgB,CAoEjB;AACA;;;AACAC,EAAAA,KAAK,GAAG;AACN,UAAMA,KAAK,GAAG,IAAI5B,KAAJ,CAAU,KAAKM,YAAf,EAA6B,KAAKG,QAAlC,CAAd,CADM,CAEN;;AACA,SAAKL,IAAL,CAAUkB,OAAV,CAAkB,UAASP,KAAT,EAAgBF,GAAhB,EAAoB;AACpCe,MAAAA,KAAK,CAACxB,IAAN,CAAWU,GAAX,CAAeD,GAAf,EAAoBgB,KAAK,CAACD,KAAN,CAAYb,KAAZ,CAApB;AACD,KAFD;;AAGA,WAAOa,KAAP;AACD;;AA7EgB","sourcesContent":["\nexport class IdMap {\n  constructor(idStringify, idParse) {\n    this._map = new Map();\n    this._idStringify = idStringify || JSON.stringify;\n    this._idParse = idParse || JSON.parse;\n  }\n\n// Some of these methods are designed to match methods on OrderedDict, since\n// (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n// (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n// set of methods that overlap between the two.)\n\n  get(id) {\n    const key = this._idStringify(id);\n    return this._map.get(key);\n  }\n\n  set(id, value) {\n    const key = this._idStringify(id);\n    this._map.set(key, value);\n  }\n\n  remove(id) {\n    const key = this._idStringify(id);\n    this._map.delete(key);\n  }\n\n  has(id) {\n    const key = this._idStringify(id);\n    return this._map.has(key);\n  }\n\n  empty() {\n    return this._map.size === 0;\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n  // Iterates over the items in the map. Return `false` to break the loop.\n  forEach(iterator) {\n    // don't use _.each, because we can't break out of it.\n    for (let [key, value] of this._map){\n      const breakIfFalse = iterator.call(\n        null,\n        value,\n        this._idParse(key)\n      );\n      if (breakIfFalse === false) {\n        return;\n      }\n    }\n  }\n\n  size() {\n    return this._map.size;\n  }\n\n  setDefault(id, def) {\n    const key = this._idStringify(id);\n    if (this._map.has(key)) {\n      return this._map.get(key);\n    }\n    this._map.set(key, def);\n    return def;\n  }\n\n  // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n  clone() {\n    const clone = new IdMap(this._idStringify, this._idParse);\n    // copy directly to avoid stringify/parse overhead\n    this._map.forEach(function(value, key){\n      clone._map.set(key, EJSON.clone(value));\n    });\n    return clone;\n  }\n}\n"]},"sourceType":"module","hash":"5b6fde364fa78412ca4e520e06feb9d7fed1a91c"}
