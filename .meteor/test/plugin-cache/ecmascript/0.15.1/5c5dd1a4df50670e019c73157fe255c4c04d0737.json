{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/idrismahjoubi/cypress-meteor-react/packages/ejson/ejson.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/ejson/ejson.js","filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/ejson/ejson.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"test","cwd":"/Users/idrismahjoubi/cypress-meteor-react","root":"/Users/idrismahjoubi/cypress-meteor-react","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/ejson/ejson.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ejson/ejson.js"}},"code":"module.export({\n  EJSON: function () {\n    return EJSON;\n  }\n});\nvar isFunction, isObject, keysOf, lengthOf, hasOwn, convertMapToObject, isArguments, isInfOrNaN, handleError;\nmodule.link(\"./utils\", {\n  isFunction: function (v) {\n    isFunction = v;\n  },\n  isObject: function (v) {\n    isObject = v;\n  },\n  keysOf: function (v) {\n    keysOf = v;\n  },\n  lengthOf: function (v) {\n    lengthOf = v;\n  },\n  hasOwn: function (v) {\n    hasOwn = v;\n  },\n  convertMapToObject: function (v) {\n    convertMapToObject = v;\n  },\n  isArguments: function (v) {\n    isArguments = v;\n  },\n  isInfOrNaN: function (v) {\n    isInfOrNaN = v;\n  },\n  handleError: function (v) {\n    handleError = v;\n  }\n}, 0);\n\n/**\n * @namespace\n * @summary Namespace for EJSON functions\n */\nvar EJSON = {}; // Custom type interface definition\n\n/**\n * @class CustomType\n * @instanceName customType\n * @memberOf EJSON\n * @summary The interface that a class must satisfy to be able to become an\n * EJSON custom type via EJSON.addType.\n */\n\n/**\n * @function typeName\n * @memberOf EJSON.CustomType\n * @summary Return the tag used to identify this type.  This must match the\n *          tag used to register this type with\n *          [`EJSON.addType`](#ejson_add_type).\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function toJSONValue\n * @memberOf EJSON.CustomType\n * @summary Serialize this instance into a JSON-compatible value.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function clone\n * @memberOf EJSON.CustomType\n * @summary Return a value `r` such that `this.equals(r)` is true, and\n *          modifications to `r` do not affect `this` and vice versa.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function equals\n * @memberOf EJSON.CustomType\n * @summary Return `true` if `other` has a value equal to `this`; `false`\n *          otherwise.\n * @locus Anywhere\n * @param {Object} other Another object to compare this to.\n * @instance\n */\n\nvar customTypes = new Map(); // Add a custom type, using a method of your choice to get to and\n// from a basic JSON-able representation.  The factory argument\n// is a function of JSON-able --> your object\n// The type you add must have:\n// - A toJSONValue() method, so that Meteor can serialize it\n// - a typeName() method, to show how to look it up in our type table.\n// It is okay if these methods are monkey-patched on.\n// EJSON.clone will use toJSONValue and the given factory to produce\n// a clone, but you may specify a method clone() that will be\n// used instead.\n// Similarly, EJSON.equals will use toJSONValue to make comparisons,\n// but you may provide a method equals() instead.\n\n/**\n * @summary Add a custom datatype to EJSON.\n * @locus Anywhere\n * @param {String} name A tag for your custom type; must be unique among\n *                      custom data types defined in your project, and must\n *                      match the result of your type's `typeName` method.\n * @param {Function} factory A function that deserializes a JSON-compatible\n *                           value into an instance of your type.  This should\n *                           match the serialization performed by your\n *                           type's `toJSONValue` method.\n */\n\nEJSON.addType = function (name, factory) {\n  if (customTypes.has(name)) {\n    throw new Error(\"Type \" + name + \" already present\");\n  }\n\n  customTypes.set(name, factory);\n};\n\nvar builtinConverters = [{\n  // Date\n  matchJSONValue: function (obj) {\n    return hasOwn(obj, '$date') && lengthOf(obj) === 1;\n  },\n  matchObject: function (obj) {\n    return obj instanceof Date;\n  },\n  toJSONValue: function (obj) {\n    return {\n      $date: obj.getTime()\n    };\n  },\n  fromJSONValue: function (obj) {\n    return new Date(obj.$date);\n  }\n}, {\n  // RegExp\n  matchJSONValue: function (obj) {\n    return hasOwn(obj, '$regexp') && hasOwn(obj, '$flags') && lengthOf(obj) === 2;\n  },\n  matchObject: function (obj) {\n    return obj instanceof RegExp;\n  },\n  toJSONValue: function (regexp) {\n    return {\n      $regexp: regexp.source,\n      $flags: regexp.flags\n    };\n  },\n  fromJSONValue: function (obj) {\n    // Replaces duplicate / invalid flags.\n    return new RegExp(obj.$regexp, obj.$flags // Cut off flags at 50 chars to avoid abusing RegExp for DOS.\n    .slice(0, 50).replace(/[^gimuy]/g, '').replace(/(.)(?=.*\\1)/g, ''));\n  }\n}, {\n  // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'\n  // which we match.)\n  matchJSONValue: function (obj) {\n    return hasOwn(obj, '$InfNaN') && lengthOf(obj) === 1;\n  },\n  matchObject: isInfOrNaN,\n  toJSONValue: function (obj) {\n    var sign;\n\n    if (Number.isNaN(obj)) {\n      sign = 0;\n    } else if (obj === Infinity) {\n      sign = 1;\n    } else {\n      sign = -1;\n    }\n\n    return {\n      $InfNaN: sign\n    };\n  },\n  fromJSONValue: function (obj) {\n    return obj.$InfNaN / 0;\n  }\n}, {\n  // Binary\n  matchJSONValue: function (obj) {\n    return hasOwn(obj, '$binary') && lengthOf(obj) === 1;\n  },\n  matchObject: function (obj) {\n    return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && hasOwn(obj, '$Uint8ArrayPolyfill');\n  },\n  toJSONValue: function (obj) {\n    return {\n      $binary: Base64.encode(obj)\n    };\n  },\n  fromJSONValue: function (obj) {\n    return Base64.decode(obj.$binary);\n  }\n}, {\n  // Escaping one level\n  matchJSONValue: function (obj) {\n    return hasOwn(obj, '$escape') && lengthOf(obj) === 1;\n  },\n  matchObject: function (obj) {\n    var match = false;\n\n    if (obj) {\n      var keyCount = lengthOf(obj);\n\n      if (keyCount === 1 || keyCount === 2) {\n        match = builtinConverters.some(function (converter) {\n          return converter.matchJSONValue(obj);\n        });\n      }\n    }\n\n    return match;\n  },\n  toJSONValue: function (obj) {\n    var newObj = {};\n    keysOf(obj).forEach(function (key) {\n      newObj[key] = EJSON.toJSONValue(obj[key]);\n    });\n    return {\n      $escape: newObj\n    };\n  },\n  fromJSONValue: function (obj) {\n    var newObj = {};\n    keysOf(obj.$escape).forEach(function (key) {\n      newObj[key] = EJSON.fromJSONValue(obj.$escape[key]);\n    });\n    return newObj;\n  }\n}, {\n  // Custom\n  matchJSONValue: function (obj) {\n    return hasOwn(obj, '$type') && hasOwn(obj, '$value') && lengthOf(obj) === 2;\n  },\n  matchObject: function (obj) {\n    return EJSON._isCustomType(obj);\n  },\n  toJSONValue: function (obj) {\n    var jsonValue = Meteor._noYieldsAllowed(function () {\n      return obj.toJSONValue();\n    });\n\n    return {\n      $type: obj.typeName(),\n      $value: jsonValue\n    };\n  },\n  fromJSONValue: function (obj) {\n    var typeName = obj.$type;\n\n    if (!customTypes.has(typeName)) {\n      throw new Error(\"Custom EJSON type \" + typeName + \" is not defined\");\n    }\n\n    var converter = customTypes.get(typeName);\n    return Meteor._noYieldsAllowed(function () {\n      return converter(obj.$value);\n    });\n  }\n}];\n\nEJSON._isCustomType = function (obj) {\n  return obj && isFunction(obj.toJSONValue) && isFunction(obj.typeName) && customTypes.has(obj.typeName());\n};\n\nEJSON._getTypes = function () {\n  var isOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return isOriginal ? customTypes : convertMapToObject(customTypes);\n};\n\nEJSON._getConverters = function () {\n  return builtinConverters;\n}; // Either return the JSON-compatible version of the argument, or undefined (if\n// the item isn't itself replaceable, but maybe some fields in it are)\n\n\nvar toJSONValueHelper = function (item) {\n  for (var i = 0; i < builtinConverters.length; i++) {\n    var converter = builtinConverters[i];\n\n    if (converter.matchObject(item)) {\n      return converter.toJSONValue(item);\n    }\n  }\n\n  return undefined;\n}; // for both arrays and objects, in-place modification.\n\n\nvar adjustTypesToJSONValue = function (obj) {\n  // Is it an atom that we need to adjust?\n  if (obj === null) {\n    return null;\n  }\n\n  var maybeChanged = toJSONValueHelper(obj);\n\n  if (maybeChanged !== undefined) {\n    return maybeChanged;\n  } // Other atoms are unchanged.\n\n\n  if (!isObject(obj)) {\n    return obj;\n  } // Iterate over array or object structure.\n\n\n  keysOf(obj).forEach(function (key) {\n    var value = obj[key];\n\n    if (!isObject(value) && value !== undefined && !isInfOrNaN(value)) {\n      return; // continue\n    }\n\n    var changed = toJSONValueHelper(value);\n\n    if (changed) {\n      obj[key] = changed;\n      return; // on to the next key\n    } // if we get here, value is an object but not adjustable\n    // at this level.  recurse.\n\n\n    adjustTypesToJSONValue(value);\n  });\n  return obj;\n};\n\nEJSON._adjustTypesToJSONValue = adjustTypesToJSONValue;\n/**\n * @summary Serialize an EJSON-compatible value into its plain JSON\n *          representation.\n * @locus Anywhere\n * @param {EJSON} val A value to serialize to plain JSON.\n */\n\nEJSON.toJSONValue = function (item) {\n  var changed = toJSONValueHelper(item);\n\n  if (changed !== undefined) {\n    return changed;\n  }\n\n  var newItem = item;\n\n  if (isObject(item)) {\n    newItem = EJSON.clone(item);\n    adjustTypesToJSONValue(newItem);\n  }\n\n  return newItem;\n}; // Either return the argument changed to have the non-json\n// rep of itself (the Object version) or the argument itself.\n// DOES NOT RECURSE.  For actually getting the fully-changed value, use\n// EJSON.fromJSONValue\n\n\nvar fromJSONValueHelper = function (value) {\n  if (isObject(value) && value !== null) {\n    var keys = keysOf(value);\n\n    if (keys.length <= 2 && keys.every(function (k) {\n      return typeof k === 'string' && k.substr(0, 1) === '$';\n    })) {\n      for (var i = 0; i < builtinConverters.length; i++) {\n        var converter = builtinConverters[i];\n\n        if (converter.matchJSONValue(value)) {\n          return converter.fromJSONValue(value);\n        }\n      }\n    }\n  }\n\n  return value;\n}; // for both arrays and objects. Tries its best to just\n// use the object you hand it, but may return something\n// different if the object you hand it itself needs changing.\n\n\nvar adjustTypesFromJSONValue = function (obj) {\n  if (obj === null) {\n    return null;\n  }\n\n  var maybeChanged = fromJSONValueHelper(obj);\n\n  if (maybeChanged !== obj) {\n    return maybeChanged;\n  } // Other atoms are unchanged.\n\n\n  if (!isObject(obj)) {\n    return obj;\n  }\n\n  keysOf(obj).forEach(function (key) {\n    var value = obj[key];\n\n    if (isObject(value)) {\n      var changed = fromJSONValueHelper(value);\n\n      if (value !== changed) {\n        obj[key] = changed;\n        return;\n      } // if we get here, value is an object but not adjustable\n      // at this level.  recurse.\n\n\n      adjustTypesFromJSONValue(value);\n    }\n  });\n  return obj;\n};\n\nEJSON._adjustTypesFromJSONValue = adjustTypesFromJSONValue;\n/**\n * @summary Deserialize an EJSON value from its plain JSON representation.\n * @locus Anywhere\n * @param {JSONCompatible} val A value to deserialize into EJSON.\n */\n\nEJSON.fromJSONValue = function (item) {\n  var changed = fromJSONValueHelper(item);\n\n  if (changed === item && isObject(item)) {\n    changed = EJSON.clone(item);\n    adjustTypesFromJSONValue(changed);\n  }\n\n  return changed;\n};\n/**\n * @summary Serialize a value to a string. For EJSON values, the serialization\n *          fully represents the value. For non-EJSON values, serializes the\n *          same way as `JSON.stringify`.\n * @locus Anywhere\n * @param {EJSON} val A value to stringify.\n * @param {Object} [options]\n * @param {Boolean | Integer | String} options.indent Indents objects and\n * arrays for easy readability.  When `true`, indents by 2 spaces; when an\n * integer, indents by that number of spaces; and when a string, uses the\n * string as the indentation pattern.\n * @param {Boolean} options.canonical When `true`, stringifies keys in an\n *                                    object in sorted order.\n */\n\n\nEJSON.stringify = handleError(function (item, options) {\n  var serialized;\n  var json = EJSON.toJSONValue(item);\n\n  if (options && (options.canonical || options.indent)) {\n    var canonicalStringify;\n    module.link(\"./stringify\", {\n      \"default\": function (v) {\n        canonicalStringify = v;\n      }\n    }, 1);\n    serialized = canonicalStringify(json, options);\n  } else {\n    serialized = JSON.stringify(json);\n  }\n\n  return serialized;\n});\n/**\n * @summary Parse a string into an EJSON value. Throws an error if the string\n *          is not valid EJSON.\n * @locus Anywhere\n * @param {String} str A string to parse into an EJSON value.\n */\n\nEJSON.parse = function (item) {\n  if (typeof item !== 'string') {\n    throw new Error('EJSON.parse argument should be a string');\n  }\n\n  return EJSON.fromJSONValue(JSON.parse(item));\n};\n/**\n * @summary Returns true if `x` is a buffer of binary data, as returned from\n *          [`EJSON.newBinary`](#ejson_new_binary).\n * @param {Object} x The variable to check.\n * @locus Anywhere\n */\n\n\nEJSON.isBinary = function (obj) {\n  return !!(typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && obj.$Uint8ArrayPolyfill);\n};\n/**\n * @summary Return true if `a` and `b` are equal to each other.  Return false\n *          otherwise.  Uses the `equals` method on `a` if present, otherwise\n *          performs a deep comparison.\n * @locus Anywhere\n * @param {EJSON} a\n * @param {EJSON} b\n * @param {Object} [options]\n * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order,\n * if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}`\n * is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The\n * default is `false`.\n */\n\n\nEJSON.equals = function (a, b, options) {\n  var i;\n  var keyOrderSensitive = !!(options && options.keyOrderSensitive);\n\n  if (a === b) {\n    return true;\n  } // This differs from the IEEE spec for NaN equality, b/c we don't want\n  // anything ever with a NaN to be poisoned from becoming equal to anything.\n\n\n  if (Number.isNaN(a) && Number.isNaN(b)) {\n    return true;\n  } // if either one is falsy, they'd have to be === to be equal\n\n\n  if (!a || !b) {\n    return false;\n  }\n\n  if (!(isObject(a) && isObject(b))) {\n    return false;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.valueOf() === b.valueOf();\n  }\n\n  if (EJSON.isBinary(a) && EJSON.isBinary(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isFunction(a.equals)) {\n    return a.equals(b, options);\n  }\n\n  if (isFunction(b.equals)) {\n    return b.equals(a, options);\n  }\n\n  if (a instanceof Array) {\n    if (!(b instanceof Array)) {\n      return false;\n    }\n\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (i = 0; i < a.length; i++) {\n      if (!EJSON.equals(a[i], b[i], options)) {\n        return false;\n      }\n    }\n\n    return true;\n  } // fallback for custom types that don't implement their own equals\n\n\n  switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {\n    case 1:\n      return false;\n\n    case 2:\n      return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));\n\n    default: // Do nothing\n\n  } // fall back to structural equality of objects\n\n\n  var ret;\n  var aKeys = keysOf(a);\n  var bKeys = keysOf(b);\n\n  if (keyOrderSensitive) {\n    i = 0;\n    ret = aKeys.every(function (key) {\n      if (i >= bKeys.length) {\n        return false;\n      }\n\n      if (key !== bKeys[i]) {\n        return false;\n      }\n\n      if (!EJSON.equals(a[key], b[bKeys[i]], options)) {\n        return false;\n      }\n\n      i++;\n      return true;\n    });\n  } else {\n    i = 0;\n    ret = aKeys.every(function (key) {\n      if (!hasOwn(b, key)) {\n        return false;\n      }\n\n      if (!EJSON.equals(a[key], b[key], options)) {\n        return false;\n      }\n\n      i++;\n      return true;\n    });\n  }\n\n  return ret && i === bKeys.length;\n};\n/**\n * @summary Return a deep copy of `val`.\n * @locus Anywhere\n * @param {EJSON} val A value to copy.\n */\n\n\nEJSON.clone = function (v) {\n  var ret;\n\n  if (!isObject(v)) {\n    return v;\n  }\n\n  if (v === null) {\n    return null; // null has typeof \"object\"\n  }\n\n  if (v instanceof Date) {\n    return new Date(v.getTime());\n  } // RegExps are not really EJSON elements (eg we don't define a serialization\n  // for them), but they're immutable anyway, so we can support them in clone.\n\n\n  if (v instanceof RegExp) {\n    return v;\n  }\n\n  if (EJSON.isBinary(v)) {\n    ret = EJSON.newBinary(v.length);\n\n    for (var i = 0; i < v.length; i++) {\n      ret[i] = v[i];\n    }\n\n    return ret;\n  }\n\n  if (Array.isArray(v)) {\n    return v.map(EJSON.clone);\n  }\n\n  if (isArguments(v)) {\n    return Array.from(v).map(EJSON.clone);\n  } // handle general user-defined typed Objects if they have a clone method\n\n\n  if (isFunction(v.clone)) {\n    return v.clone();\n  } // handle other custom types\n\n\n  if (EJSON._isCustomType(v)) {\n    return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);\n  } // handle other objects\n\n\n  ret = {};\n  keysOf(v).forEach(function (key) {\n    ret[key] = EJSON.clone(v[key]);\n  });\n  return ret;\n};\n/**\n * @summary Allocate a new buffer of binary data that EJSON can serialize.\n * @locus Anywhere\n * @param {Number} size The number of bytes of binary data to allocate.\n */\n// EJSON.newBinary is the public documented API for this functionality,\n// but the implementation is in the 'base64' package to avoid\n// introducing a circular dependency. (If the implementation were here,\n// then 'base64' would have to use EJSON.newBinary, and 'ejson' would\n// also have to use 'base64'.)\n\n\nEJSON.newBinary = Base64.newBinary;","map":{"version":3,"sources":["packages/ejson/ejson.js"],"names":["module","export","EJSON","isFunction","isObject","keysOf","lengthOf","hasOwn","convertMapToObject","isArguments","isInfOrNaN","handleError","link","v","customTypes","Map","addType","name","factory","has","Error","set","builtinConverters","matchJSONValue","obj","matchObject","Date","toJSONValue","$date","getTime","fromJSONValue","RegExp","regexp","$regexp","source","$flags","flags","slice","replace","sign","Number","isNaN","Infinity","$InfNaN","Uint8Array","$binary","Base64","encode","decode","match","keyCount","some","converter","newObj","forEach","key","$escape","_isCustomType","jsonValue","Meteor","_noYieldsAllowed","$type","typeName","$value","get","_getTypes","isOriginal","_getConverters","toJSONValueHelper","item","i","length","undefined","adjustTypesToJSONValue","maybeChanged","value","changed","_adjustTypesToJSONValue","newItem","clone","fromJSONValueHelper","keys","every","k","substr","adjustTypesFromJSONValue","_adjustTypesFromJSONValue","stringify","options","serialized","json","canonical","indent","canonicalStringify","JSON","parse","isBinary","$Uint8ArrayPolyfill","equals","a","b","keyOrderSensitive","valueOf","Array","ret","aKeys","bKeys","newBinary","isArray","map","from"],"mappings":"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","sourcesContent":["import {\n  isFunction,\n  isObject,\n  keysOf,\n  lengthOf,\n  hasOwn,\n  convertMapToObject,\n  isArguments,\n  isInfOrNaN,\n  handleError,\n} from './utils';\n\n/**\n * @namespace\n * @summary Namespace for EJSON functions\n */\nconst EJSON = {};\n\n// Custom type interface definition\n/**\n * @class CustomType\n * @instanceName customType\n * @memberOf EJSON\n * @summary The interface that a class must satisfy to be able to become an\n * EJSON custom type via EJSON.addType.\n */\n\n/**\n * @function typeName\n * @memberOf EJSON.CustomType\n * @summary Return the tag used to identify this type.  This must match the\n *          tag used to register this type with\n *          [`EJSON.addType`](#ejson_add_type).\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function toJSONValue\n * @memberOf EJSON.CustomType\n * @summary Serialize this instance into a JSON-compatible value.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function clone\n * @memberOf EJSON.CustomType\n * @summary Return a value `r` such that `this.equals(r)` is true, and\n *          modifications to `r` do not affect `this` and vice versa.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function equals\n * @memberOf EJSON.CustomType\n * @summary Return `true` if `other` has a value equal to `this`; `false`\n *          otherwise.\n * @locus Anywhere\n * @param {Object} other Another object to compare this to.\n * @instance\n */\n\nconst customTypes = new Map();\n\n// Add a custom type, using a method of your choice to get to and\n// from a basic JSON-able representation.  The factory argument\n// is a function of JSON-able --> your object\n// The type you add must have:\n// - A toJSONValue() method, so that Meteor can serialize it\n// - a typeName() method, to show how to look it up in our type table.\n// It is okay if these methods are monkey-patched on.\n// EJSON.clone will use toJSONValue and the given factory to produce\n// a clone, but you may specify a method clone() that will be\n// used instead.\n// Similarly, EJSON.equals will use toJSONValue to make comparisons,\n// but you may provide a method equals() instead.\n/**\n * @summary Add a custom datatype to EJSON.\n * @locus Anywhere\n * @param {String} name A tag for your custom type; must be unique among\n *                      custom data types defined in your project, and must\n *                      match the result of your type's `typeName` method.\n * @param {Function} factory A function that deserializes a JSON-compatible\n *                           value into an instance of your type.  This should\n *                           match the serialization performed by your\n *                           type's `toJSONValue` method.\n */\nEJSON.addType = (name, factory) => {\n  if (customTypes.has(name)) {\n    throw new Error(`Type ${name} already present`);\n  }\n  customTypes.set(name, factory);\n};\n\nconst builtinConverters = [\n  { // Date\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$date') && lengthOf(obj) === 1;\n    },\n    matchObject(obj) {\n      return obj instanceof Date;\n    },\n    toJSONValue(obj) {\n      return {$date: obj.getTime()};\n    },\n    fromJSONValue(obj) {\n      return new Date(obj.$date);\n    },\n  },\n  { // RegExp\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$regexp')\n        && hasOwn(obj, '$flags')\n        && lengthOf(obj) === 2;\n    },\n    matchObject(obj) {\n      return obj instanceof RegExp;\n    },\n    toJSONValue(regexp) {\n      return {\n        $regexp: regexp.source,\n        $flags: regexp.flags\n      };\n    },\n    fromJSONValue(obj) {\n      // Replaces duplicate / invalid flags.\n      return new RegExp(\n        obj.$regexp,\n        obj.$flags\n          // Cut off flags at 50 chars to avoid abusing RegExp for DOS.\n          .slice(0, 50)\n          .replace(/[^gimuy]/g,'')\n          .replace(/(.)(?=.*\\1)/g, '')\n      );\n    },\n  },\n  { // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'\n    // which we match.)\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$InfNaN') && lengthOf(obj) === 1;\n    },\n    matchObject: isInfOrNaN,\n    toJSONValue(obj) {\n      let sign;\n      if (Number.isNaN(obj)) {\n        sign = 0;\n      } else if (obj === Infinity) {\n        sign = 1;\n      } else {\n        sign = -1;\n      }\n      return {$InfNaN: sign};\n    },\n    fromJSONValue(obj) {\n      return obj.$InfNaN / 0;\n    },\n  },\n  { // Binary\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$binary') && lengthOf(obj) === 1;\n    },\n    matchObject(obj) {\n      return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array\n        || (obj && hasOwn(obj, '$Uint8ArrayPolyfill'));\n    },\n    toJSONValue(obj) {\n      return {$binary: Base64.encode(obj)};\n    },\n    fromJSONValue(obj) {\n      return Base64.decode(obj.$binary);\n    },\n  },\n  { // Escaping one level\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$escape') && lengthOf(obj) === 1;\n    },\n    matchObject(obj) {\n      let match = false;\n      if (obj) {\n        const keyCount = lengthOf(obj);\n        if (keyCount === 1 || keyCount === 2) {\n          match =\n            builtinConverters.some(converter => converter.matchJSONValue(obj));\n        }\n      }\n      return match;\n    },\n    toJSONValue(obj) {\n      const newObj = {};\n      keysOf(obj).forEach(key => {\n        newObj[key] = EJSON.toJSONValue(obj[key]);\n      });\n      return {$escape: newObj};\n    },\n    fromJSONValue(obj) {\n      const newObj = {};\n      keysOf(obj.$escape).forEach(key => {\n        newObj[key] = EJSON.fromJSONValue(obj.$escape[key]);\n      });\n      return newObj;\n    },\n  },\n  { // Custom\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$type')\n        && hasOwn(obj, '$value') && lengthOf(obj) === 2;\n    },\n    matchObject(obj) {\n      return EJSON._isCustomType(obj);\n    },\n    toJSONValue(obj) {\n      const jsonValue = Meteor._noYieldsAllowed(() => obj.toJSONValue());\n      return {$type: obj.typeName(), $value: jsonValue};\n    },\n    fromJSONValue(obj) {\n      const typeName = obj.$type;\n      if (!customTypes.has(typeName)) {\n        throw new Error(`Custom EJSON type ${typeName} is not defined`);\n      }\n      const converter = customTypes.get(typeName);\n      return Meteor._noYieldsAllowed(() => converter(obj.$value));\n    },\n  },\n];\n\nEJSON._isCustomType = (obj) => (\n  obj &&\n  isFunction(obj.toJSONValue) &&\n  isFunction(obj.typeName) &&\n  customTypes.has(obj.typeName())\n);\n\nEJSON._getTypes = (isOriginal = false) => (isOriginal ? customTypes : convertMapToObject(customTypes));\n\nEJSON._getConverters = () => builtinConverters;\n\n// Either return the JSON-compatible version of the argument, or undefined (if\n// the item isn't itself replaceable, but maybe some fields in it are)\nconst toJSONValueHelper = item => {\n  for (let i = 0; i < builtinConverters.length; i++) {\n    const converter = builtinConverters[i];\n    if (converter.matchObject(item)) {\n      return converter.toJSONValue(item);\n    }\n  }\n  return undefined;\n};\n\n// for both arrays and objects, in-place modification.\nconst adjustTypesToJSONValue = obj => {\n  // Is it an atom that we need to adjust?\n  if (obj === null) {\n    return null;\n  }\n\n  const maybeChanged = toJSONValueHelper(obj);\n  if (maybeChanged !== undefined) {\n    return maybeChanged;\n  }\n\n  // Other atoms are unchanged.\n  if (!isObject(obj)) {\n    return obj;\n  }\n\n  // Iterate over array or object structure.\n  keysOf(obj).forEach(key => {\n    const value = obj[key];\n    if (!isObject(value) && value !== undefined &&\n        !isInfOrNaN(value)) {\n      return; // continue\n    }\n\n    const changed = toJSONValueHelper(value);\n    if (changed) {\n      obj[key] = changed;\n      return; // on to the next key\n    }\n    // if we get here, value is an object but not adjustable\n    // at this level.  recurse.\n    adjustTypesToJSONValue(value);\n  });\n  return obj;\n};\n\nEJSON._adjustTypesToJSONValue = adjustTypesToJSONValue;\n\n/**\n * @summary Serialize an EJSON-compatible value into its plain JSON\n *          representation.\n * @locus Anywhere\n * @param {EJSON} val A value to serialize to plain JSON.\n */\nEJSON.toJSONValue = item => {\n  const changed = toJSONValueHelper(item);\n  if (changed !== undefined) {\n    return changed;\n  }\n\n  let newItem = item;\n  if (isObject(item)) {\n    newItem = EJSON.clone(item);\n    adjustTypesToJSONValue(newItem);\n  }\n  return newItem;\n};\n\n// Either return the argument changed to have the non-json\n// rep of itself (the Object version) or the argument itself.\n// DOES NOT RECURSE.  For actually getting the fully-changed value, use\n// EJSON.fromJSONValue\nconst fromJSONValueHelper = value => {\n  if (isObject(value) && value !== null) {\n    const keys = keysOf(value);\n    if (keys.length <= 2\n        && keys.every(k => typeof k === 'string' && k.substr(0, 1) === '$')) {\n      for (let i = 0; i < builtinConverters.length; i++) {\n        const converter = builtinConverters[i];\n        if (converter.matchJSONValue(value)) {\n          return converter.fromJSONValue(value);\n        }\n      }\n    }\n  }\n  return value;\n};\n\n// for both arrays and objects. Tries its best to just\n// use the object you hand it, but may return something\n// different if the object you hand it itself needs changing.\nconst adjustTypesFromJSONValue = obj => {\n  if (obj === null) {\n    return null;\n  }\n\n  const maybeChanged = fromJSONValueHelper(obj);\n  if (maybeChanged !== obj) {\n    return maybeChanged;\n  }\n\n  // Other atoms are unchanged.\n  if (!isObject(obj)) {\n    return obj;\n  }\n\n  keysOf(obj).forEach(key => {\n    const value = obj[key];\n    if (isObject(value)) {\n      const changed = fromJSONValueHelper(value);\n      if (value !== changed) {\n        obj[key] = changed;\n        return;\n      }\n      // if we get here, value is an object but not adjustable\n      // at this level.  recurse.\n      adjustTypesFromJSONValue(value);\n    }\n  });\n  return obj;\n};\n\nEJSON._adjustTypesFromJSONValue = adjustTypesFromJSONValue;\n\n/**\n * @summary Deserialize an EJSON value from its plain JSON representation.\n * @locus Anywhere\n * @param {JSONCompatible} val A value to deserialize into EJSON.\n */\nEJSON.fromJSONValue = item => {\n  let changed = fromJSONValueHelper(item);\n  if (changed === item && isObject(item)) {\n    changed = EJSON.clone(item);\n    adjustTypesFromJSONValue(changed);\n  }\n  return changed;\n};\n\n/**\n * @summary Serialize a value to a string. For EJSON values, the serialization\n *          fully represents the value. For non-EJSON values, serializes the\n *          same way as `JSON.stringify`.\n * @locus Anywhere\n * @param {EJSON} val A value to stringify.\n * @param {Object} [options]\n * @param {Boolean | Integer | String} options.indent Indents objects and\n * arrays for easy readability.  When `true`, indents by 2 spaces; when an\n * integer, indents by that number of spaces; and when a string, uses the\n * string as the indentation pattern.\n * @param {Boolean} options.canonical When `true`, stringifies keys in an\n *                                    object in sorted order.\n */\nEJSON.stringify = handleError((item, options) => {\n  let serialized;\n  const json = EJSON.toJSONValue(item);\n  if (options && (options.canonical || options.indent)) {\n    import canonicalStringify from './stringify';\n    serialized = canonicalStringify(json, options);\n  } else {\n    serialized = JSON.stringify(json);\n  }\n  return serialized;\n});\n\n/**\n * @summary Parse a string into an EJSON value. Throws an error if the string\n *          is not valid EJSON.\n * @locus Anywhere\n * @param {String} str A string to parse into an EJSON value.\n */\nEJSON.parse = item => {\n  if (typeof item !== 'string') {\n    throw new Error('EJSON.parse argument should be a string');\n  }\n  return EJSON.fromJSONValue(JSON.parse(item));\n};\n\n/**\n * @summary Returns true if `x` is a buffer of binary data, as returned from\n *          [`EJSON.newBinary`](#ejson_new_binary).\n * @param {Object} x The variable to check.\n * @locus Anywhere\n */\nEJSON.isBinary = obj => {\n  return !!((typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array) ||\n    (obj && obj.$Uint8ArrayPolyfill));\n};\n\n/**\n * @summary Return true if `a` and `b` are equal to each other.  Return false\n *          otherwise.  Uses the `equals` method on `a` if present, otherwise\n *          performs a deep comparison.\n * @locus Anywhere\n * @param {EJSON} a\n * @param {EJSON} b\n * @param {Object} [options]\n * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order,\n * if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}`\n * is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The\n * default is `false`.\n */\nEJSON.equals = (a, b, options) => {\n  let i;\n  const keyOrderSensitive = !!(options && options.keyOrderSensitive);\n  if (a === b) {\n    return true;\n  }\n\n  // This differs from the IEEE spec for NaN equality, b/c we don't want\n  // anything ever with a NaN to be poisoned from becoming equal to anything.\n  if (Number.isNaN(a) && Number.isNaN(b)) {\n    return true;\n  }\n\n  // if either one is falsy, they'd have to be === to be equal\n  if (!a || !b) {\n    return false;\n  }\n\n  if (!(isObject(a) && isObject(b))) {\n    return false;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.valueOf() === b.valueOf();\n  }\n\n  if (EJSON.isBinary(a) && EJSON.isBinary(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isFunction(a.equals)) {\n    return a.equals(b, options);\n  }\n\n  if (isFunction(b.equals)) {\n    return b.equals(a, options);\n  }\n\n  if (a instanceof Array) {\n    if (!(b instanceof Array)) {\n      return false;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (i = 0; i < a.length; i++) {\n      if (!EJSON.equals(a[i], b[i], options)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // fallback for custom types that don't implement their own equals\n  switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {\n    case 1: return false;\n    case 2: return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));\n    default: // Do nothing\n  }\n\n  // fall back to structural equality of objects\n  let ret;\n  const aKeys = keysOf(a);\n  const bKeys = keysOf(b);\n  if (keyOrderSensitive) {\n    i = 0;\n    ret = aKeys.every(key => {\n      if (i >= bKeys.length) {\n        return false;\n      }\n      if (key !== bKeys[i]) {\n        return false;\n      }\n      if (!EJSON.equals(a[key], b[bKeys[i]], options)) {\n        return false;\n      }\n      i++;\n      return true;\n    });\n  } else {\n    i = 0;\n    ret = aKeys.every(key => {\n      if (!hasOwn(b, key)) {\n        return false;\n      }\n      if (!EJSON.equals(a[key], b[key], options)) {\n        return false;\n      }\n      i++;\n      return true;\n    });\n  }\n  return ret && i === bKeys.length;\n};\n\n/**\n * @summary Return a deep copy of `val`.\n * @locus Anywhere\n * @param {EJSON} val A value to copy.\n */\nEJSON.clone = v => {\n  let ret;\n  if (!isObject(v)) {\n    return v;\n  }\n\n  if (v === null) {\n    return null; // null has typeof \"object\"\n  }\n\n  if (v instanceof Date) {\n    return new Date(v.getTime());\n  }\n\n  // RegExps are not really EJSON elements (eg we don't define a serialization\n  // for them), but they're immutable anyway, so we can support them in clone.\n  if (v instanceof RegExp) {\n    return v;\n  }\n\n  if (EJSON.isBinary(v)) {\n    ret = EJSON.newBinary(v.length);\n    for (let i = 0; i < v.length; i++) {\n      ret[i] = v[i];\n    }\n    return ret;\n  }\n\n  if (Array.isArray(v)) {\n    return v.map(EJSON.clone);\n  }\n\n  if (isArguments(v)) {\n    return Array.from(v).map(EJSON.clone);\n  }\n\n  // handle general user-defined typed Objects if they have a clone method\n  if (isFunction(v.clone)) {\n    return v.clone();\n  }\n\n  // handle other custom types\n  if (EJSON._isCustomType(v)) {\n    return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);\n  }\n\n  // handle other objects\n  ret = {};\n  keysOf(v).forEach((key) => {\n    ret[key] = EJSON.clone(v[key]);\n  });\n  return ret;\n};\n\n/**\n * @summary Allocate a new buffer of binary data that EJSON can serialize.\n * @locus Anywhere\n * @param {Number} size The number of bytes of binary data to allocate.\n */\n// EJSON.newBinary is the public documented API for this functionality,\n// but the implementation is in the 'base64' package to avoid\n// introducing a circular dependency. (If the implementation were here,\n// then 'base64' would have to use EJSON.newBinary, and 'ejson' would\n// also have to use 'base64'.)\nEJSON.newBinary = Base64.newBinary;\n\nexport { EJSON };\n"]},"sourceType":"module","hash":"5c5dd1a4df50670e019c73157fe255c4c04d0737"}
