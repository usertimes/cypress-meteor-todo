{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/idrismahjoubi/cypress-meteor-react/packages/accounts-base/accounts_common.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/accounts-base/accounts_common.js","filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/accounts-base/accounts_common.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"test","cwd":"/Users/idrismahjoubi/cypress-meteor-react","root":"/Users/idrismahjoubi/cypress-meteor-react","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/accounts-base/accounts_common.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-base/accounts_common.js"}},"code":"var _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  AccountsCommon: function () {\n    return AccountsCommon;\n  },\n  EXPIRE_TOKENS_INTERVAL_MS: function () {\n    return EXPIRE_TOKENS_INTERVAL_MS;\n  },\n  CONNECTION_CLOSE_DELAY_MS: function () {\n    return CONNECTION_CLOSE_DELAY_MS;\n  }\n});\n\nvar AccountsCommon = /*#__PURE__*/function () {\n  function AccountsCommon(options) {\n    var _this = this;\n\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {}; // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n\n    this.connection = undefined;\n\n    this._initConnection(options || {}); // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n\n\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    }); // Callback exceptions are printed with Meteor._debug and ignored.\n\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogout callback\"\n    }); // Expose for testing.\n\n    this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n    this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS; // Thrown when the user cancels the login process (eg, closes an oauth\n    // popup, declines retina scan, etc)\n\n    var lceName = 'Accounts.LoginCancelledError';\n    this.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {\n      this.message = description;\n    });\n    this.LoginCancelledError.prototype.name = lceName; // This is used to transmit specific subclass errors over the wire. We\n    // should come up with a more generic way to do this (eg, with some sort of\n    // symbolic error code rather than a number).\n\n    this.LoginCancelledError.numericError = 0x8acdc2f; // loginServiceConfiguration and ConfigError are maintained for backwards compatibility\n\n    Meteor.startup(function () {\n      var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n      _this.loginServiceConfiguration = ServiceConfiguration.configurations;\n      _this.ConfigError = ServiceConfiguration.ConfigError;\n    });\n  }\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n\n\n  var _proto = AccountsCommon.prototype;\n\n  _proto.userId = function () {\n    function userId() {\n      throw new Error(\"userId method not implemented\");\n    }\n\n    return userId;\n  }() // merge the defaultFieldSelector with an existing options object\n  ;\n\n  _proto._addDefaultFieldSelector = function () {\n    function _addDefaultFieldSelector() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // this will be the most common case for most people, so make it quick\n      if (!this._options.defaultFieldSelector) return options; // if no field selector then just use defaultFieldSelector\n\n      if (!options.fields) return _objectSpread(_objectSpread({}, options), {}, {\n        fields: this._options.defaultFieldSelector\n      }); // if empty field selector then the full user object is explicitly requested, so obey\n\n      var keys = Object.keys(options.fields);\n      if (!keys.length) return options; // if the requested fields are +ve then ignore defaultFieldSelector\n      // assume they are all either +ve or -ve because Mongo doesn't like mixed\n\n      if (!!options.fields[keys[0]]) return options; // The requested fields are -ve.\n      // If the defaultFieldSelector is +ve then use requested fields, otherwise merge them\n\n      var keys2 = Object.keys(this._options.defaultFieldSelector);\n      return this._options.defaultFieldSelector[keys2[0]] ? options : _objectSpread(_objectSpread({}, options), {}, {\n        fields: _objectSpread(_objectSpread({}, options.fields), this._options.defaultFieldSelector)\n      });\n    }\n\n    return _addDefaultFieldSelector;\n  }()\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  ;\n\n  _proto.user = function () {\n    function user(options) {\n      var userId = this.userId();\n      return userId ? this.users.findOne(userId, this._addDefaultFieldSelector(options)) : null;\n    }\n\n    return user;\n  }() // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {Number} options.loginExpiration The number of milliseconds from when a user logs in until their token expires and they are logged out, for a more granular control. If `loginExpirationInDays` is set, it takes precedent.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specified on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordResetTokenExpiration The number of milliseconds from when a link to reset password is sent until token expires and user can't reset password with the link anymore. If `passwordResetTokenExpirationInDays` is set, it takes precedent.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set initial password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Number} options.passwordEnrollTokenExpiration The number of milliseconds from when a link to set initial password is sent until token expires and user can't set password with the link anymore. If `passwordEnrollTokenExpirationInDays` is set, it takes precedent.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   * @param {MongoFieldSpecifier} options.defaultFieldSelector To exclude by default large custom fields from `Meteor.user()` and `Meteor.findUserBy...()` functions when called without a field selector, and all `onLogin`, `onLoginFailure` and `onLogout` callbacks.  Example: `Accounts.config({ defaultFieldSelector: { myBigArray: 0 }})`.\n   */\n  ;\n\n  _proto.config = function () {\n    function config(options) {\n      var _this2 = this;\n\n      // We don't want users to accidentally only call Accounts.config on the\n      // client, where some of the options will have partial effects (eg removing\n      // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n      // is set, or redirecting Google login to a specific-domain page) without\n      // having their full effects.\n      if (Meteor.isServer) {\n        __meteor_runtime_config__.accountsConfigCalled = true;\n      } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n        // XXX would be nice to \"crash\" the client and replace the UI with an error\n        // message, but there's no trivial way to do this.\n        Meteor._debug(\"Accounts.config was called on the client but not on the \" + \"server; some configuration options may not take effect.\");\n      } // We need to validate the oauthSecretKey option at the time\n      // Accounts.config is called. We also deliberately don't store the\n      // oauthSecretKey in Accounts._options.\n\n\n      if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {\n        if (Meteor.isClient) {\n          throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n        }\n\n        if (!Package[\"oauth-encryption\"]) {\n          throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n        }\n\n        Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n        options = _objectSpread({}, options);\n        delete options.oauthSecretKey;\n      } // validate option keys\n\n\n      var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"passwordEnrollTokenExpiration\", \"passwordEnrollTokenExpirationInDays\", \"restrictCreationByEmailDomain\", \"loginExpirationInDays\", \"loginExpiration\", \"passwordResetTokenExpirationInDays\", \"passwordResetTokenExpiration\", \"ambiguousErrorMessages\", \"bcryptRounds\", \"defaultFieldSelector\"];\n      Object.keys(options).forEach(function (key) {\n        if (!VALID_KEYS.includes(key)) {\n          throw new Error(\"Accounts.config: Invalid key: \" + key);\n        }\n      }); // set values in Accounts._options\n\n      VALID_KEYS.forEach(function (key) {\n        if (key in options) {\n          if (key in _this2._options) {\n            throw new Error(\"Can't set `\" + key + \"` more than once\");\n          }\n\n          _this2._options[key] = options[key];\n        }\n      });\n    }\n\n    return config;\n  }()\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n  ;\n\n  _proto.onLogin = function () {\n    function onLogin(func) {\n      var ret = this._onLoginHook.register(func); // call the just registered callback if already logged in\n\n\n      this._startupCallback(ret.callback);\n\n      return ret;\n    }\n\n    return onLogin;\n  }()\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  ;\n\n  _proto.onLoginFailure = function () {\n    function onLoginFailure(func) {\n      return this._onLoginFailureHook.register(func);\n    }\n\n    return onLoginFailure;\n  }()\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  ;\n\n  _proto.onLogout = function () {\n    function onLogout(func) {\n      return this._onLogoutHook.register(func);\n    }\n\n    return onLogout;\n  }();\n\n  _proto._initConnection = function () {\n    function _initConnection(options) {\n      if (!Meteor.isClient) {\n        return;\n      } // The connection used by the Accounts system. This is the connection\n      // that will get logged in by Meteor.login(), and this is the\n      // connection whose login state will be reflected by Meteor.userId().\n      //\n      // It would be much preferable for this to be in accounts_client.js,\n      // but it has to be here because it's needed to create the\n      // Meteor.users collection.\n\n\n      if (options.connection) {\n        this.connection = options.connection;\n      } else if (options.ddpUrl) {\n        this.connection = DDP.connect(options.ddpUrl);\n      } else if (typeof __meteor_runtime_config__ !== \"undefined\" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n        // Temporary, internal hook to allow the server to point the client\n        // to a different authentication server. This is for a very\n        // particular use case that comes up when implementing a oauth\n        // server. Unsupported and may go away at any point in time.\n        //\n        // We will eventually provide a general way to use account-base\n        // against any DDP connection, not just one special one.\n        this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n      } else {\n        this.connection = Meteor.connection;\n      }\n    }\n\n    return _initConnection;\n  }();\n\n  _proto._getTokenLifetimeMs = function () {\n    function _getTokenLifetimeMs() {\n      // When loginExpirationInDays is set to null, we'll use a really high\n      // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n      // unexpiring token.\n      var loginExpirationInDays = this._options.loginExpirationInDays === null ? LOGIN_UNEXPIRING_TOKEN_DAYS : this._options.loginExpirationInDays;\n      return this._options.loginExpiration || (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 86400000;\n    }\n\n    return _getTokenLifetimeMs;\n  }();\n\n  _proto._getPasswordResetTokenLifetimeMs = function () {\n    function _getPasswordResetTokenLifetimeMs() {\n      return this._options.passwordResetTokenExpiration || (this._options.passwordResetTokenExpirationInDays || DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 86400000;\n    }\n\n    return _getPasswordResetTokenLifetimeMs;\n  }();\n\n  _proto._getPasswordEnrollTokenLifetimeMs = function () {\n    function _getPasswordEnrollTokenLifetimeMs() {\n      return this._options.passwordEnrollTokenExpiration || (this._options.passwordEnrollTokenExpirationInDays || DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 86400000;\n    }\n\n    return _getPasswordEnrollTokenLifetimeMs;\n  }();\n\n  _proto._tokenExpiration = function () {\n    function _tokenExpiration(when) {\n      // We pass when through the Date constructor for backwards compatibility;\n      // `when` used to be a number.\n      return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());\n    }\n\n    return _tokenExpiration;\n  }();\n\n  _proto._tokenExpiresSoon = function () {\n    function _tokenExpiresSoon(when) {\n      var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n\n      var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n\n      if (minLifetimeMs > minLifetimeCapMs) {\n        minLifetimeMs = minLifetimeCapMs;\n      }\n\n      return new Date() > new Date(when) - minLifetimeMs;\n    }\n\n    return _tokenExpiresSoon;\n  }() // No-op on the server, overridden on the client.\n  ;\n\n  _proto._startupCallback = function () {\n    function _startupCallback(callback) {}\n\n    return _startupCallback;\n  }();\n\n  return AccountsCommon;\n}();\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\n\n\nMeteor.user = function (options) {\n  return Accounts.user(options);\n}; // how long (in days) until a login token expires\n\n\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90; // how long (in days) until reset password token expires\n\nvar DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3; // how long (in days) until enrol password token expires\n\nvar DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30; // Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\n\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\n\nvar EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000;\nvar CONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nvar LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;","map":{"version":3,"sources":["packages/accounts-base/accounts_common.js"],"names":["_objectSpread","module","link","default","v","export","AccountsCommon","EXPIRE_TOKENS_INTERVAL_MS","CONNECTION_CLOSE_DELAY_MS","options","_options","connection","undefined","_initConnection","users","Mongo","Collection","_preventAutopublish","_onLoginHook","Hook","bindEnvironment","debugPrintExceptions","_onLoginFailureHook","_onLogoutHook","DEFAULT_LOGIN_EXPIRATION_DAYS","LOGIN_UNEXPIRING_TOKEN_DAYS","lceName","LoginCancelledError","Meteor","makeErrorType","description","message","prototype","name","numericError","startup","ServiceConfiguration","Package","loginServiceConfiguration","configurations","ConfigError","userId","Error","_addDefaultFieldSelector","defaultFieldSelector","fields","keys","Object","length","keys2","user","findOne","config","isServer","__meteor_runtime_config__","accountsConfigCalled","_debug","hasOwnProperty","call","isClient","OAuthEncryption","loadKey","oauthSecretKey","VALID_KEYS","forEach","key","includes","onLogin","func","ret","register","_startupCallback","callback","onLoginFailure","onLogout","ddpUrl","DDP","connect","ACCOUNTS_CONNECTION_URL","_getTokenLifetimeMs","loginExpirationInDays","loginExpiration","_getPasswordResetTokenLifetimeMs","passwordResetTokenExpiration","passwordResetTokenExpirationInDays","DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS","_getPasswordEnrollTokenLifetimeMs","passwordEnrollTokenExpiration","passwordEnrollTokenExpirationInDays","DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS","_tokenExpiration","when","Date","getTime","_tokenExpiresSoon","minLifetimeMs","minLifetimeCapMs","MIN_TOKEN_LIFETIME_CAP_SECS","Accounts"],"mappings":"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","sourcesContent":["/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogout callback\"\n    });\n\n    // Expose for testing.\n    this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n    this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS;\n\n    // Thrown when the user cancels the login process (eg, closes an oauth\n    // popup, declines retina scan, etc)\n    const lceName = 'Accounts.LoginCancelledError';\n    this.LoginCancelledError = Meteor.makeErrorType(\n      lceName,\n      function (description) {\n        this.message = description;\n      }\n    );\n    this.LoginCancelledError.prototype.name = lceName;\n\n    // This is used to transmit specific subclass errors over the wire. We\n    // should come up with a more generic way to do this (eg, with some sort of\n    // symbolic error code rather than a number).\n    this.LoginCancelledError.numericError = 0x8acdc2f;\n\n    // loginServiceConfiguration and ConfigError are maintained for backwards compatibility\n    Meteor.startup(() => {\n      const { ServiceConfiguration } = Package['service-configuration'];\n      this.loginServiceConfiguration = ServiceConfiguration.configurations;\n      this.ConfigError = ServiceConfiguration.ConfigError;\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  // merge the defaultFieldSelector with an existing options object\n  _addDefaultFieldSelector(options = {}) {\n    // this will be the most common case for most people, so make it quick\n    if (!this._options.defaultFieldSelector) return options;\n\n    // if no field selector then just use defaultFieldSelector\n    if (!options.fields) return {\n      ...options,\n      fields: this._options.defaultFieldSelector,\n    };\n\n    // if empty field selector then the full user object is explicitly requested, so obey\n    const keys = Object.keys(options.fields);\n    if (!keys.length) return options;\n\n    // if the requested fields are +ve then ignore defaultFieldSelector\n    // assume they are all either +ve or -ve because Mongo doesn't like mixed\n    if (!!options.fields[keys[0]]) return options;\n\n    // The requested fields are -ve.\n    // If the defaultFieldSelector is +ve then use requested fields, otherwise merge them\n    const keys2 = Object.keys(this._options.defaultFieldSelector);\n    return this._options.defaultFieldSelector[keys2[0]] ? options : {\n      ...options,\n      fields: {\n        ...options.fields,\n        ...this._options.defaultFieldSelector,\n      }\n    }\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  user(options) {\n    const userId = this.userId();\n    return userId ? this.users.findOne(userId, this._addDefaultFieldSelector(options)) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {Number} options.loginExpiration The number of milliseconds from when a user logs in until their token expires and they are logged out, for a more granular control. If `loginExpirationInDays` is set, it takes precedent.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specified on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordResetTokenExpiration The number of milliseconds from when a link to reset password is sent until token expires and user can't reset password with the link anymore. If `passwordResetTokenExpirationInDays` is set, it takes precedent.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set initial password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Number} options.passwordEnrollTokenExpiration The number of milliseconds from when a link to set initial password is sent until token expires and user can't set password with the link anymore. If `passwordEnrollTokenExpirationInDays` is set, it takes precedent.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   * @param {MongoFieldSpecifier} options.defaultFieldSelector To exclude by default large custom fields from `Meteor.user()` and `Meteor.findUserBy...()` functions when called without a field selector, and all `onLogin`, `onLoginFailure` and `onLogout` callbacks.  Example: `Accounts.config({ defaultFieldSelector: { myBigArray: 0 }})`.\n   */\n  config(options) {\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {\n      if (Meteor.isClient) {\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      }\n      if (! Package[\"oauth-encryption\"]) {\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      }\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = { ...options };\n      delete options.oauthSecretKey;\n    }\n\n    // validate option keys\n    const VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"passwordEnrollTokenExpiration\",\n                      \"passwordEnrollTokenExpirationInDays\", \"restrictCreationByEmailDomain\", \"loginExpirationInDays\",\n                      \"loginExpiration\", \"passwordResetTokenExpirationInDays\", \"passwordResetTokenExpiration\",\n                      \"ambiguousErrorMessages\", \"bcryptRounds\", \"defaultFieldSelector\"];\n\n    Object.keys(options).forEach(key => {\n      if (!VALID_KEYS.includes(key)) {\n        throw new Error(`Accounts.config: Invalid key: ${key}`);\n      }\n    });\n\n    // set values in Accounts._options\n    VALID_KEYS.forEach(key => {\n      if (key in options) {\n        if (key in this._options) {\n          throw new Error(`Can't set \\`${key}\\` more than once`);\n        }\n        this._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n  onLogin(func) {\n    let ret = this._onLoginHook.register(func);\n    // call the just registered callback if already logged in\n    this._startupCallback(ret.callback);\n    return ret;\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    // When loginExpirationInDays is set to null, we'll use a really high\n    // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n    // unexpiring token.\n    const loginExpirationInDays =\n      (this._options.loginExpirationInDays === null)\n        ? LOGIN_UNEXPIRING_TOKEN_DAYS\n        : this._options.loginExpirationInDays;\n    return this._options.loginExpiration || (loginExpirationInDays\n        || DEFAULT_LOGIN_EXPIRATION_DAYS) * 86400000;\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n    return this._options.passwordResetTokenExpiration || (this._options.passwordResetTokenExpirationInDays ||\n            DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 86400000;\n  }\n\n  _getPasswordEnrollTokenLifetimeMs() {\n    return this._options.passwordEnrollTokenExpiration || (this._options.passwordEnrollTokenExpirationInDays ||\n        DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 86400000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    let minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    const minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs) {\n      minLifetimeMs = minLifetimeCapMs;\n    }\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n\n  // No-op on the server, overridden on the client.\n  _startupCallback(callback) {}\n}\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = () => Accounts.userId();\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.user = (options) => Accounts.user(options);\n\n// how long (in days) until a login token expires\nconst DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// how long (in days) until reset password token expires\nconst DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nconst DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nconst MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nexport const EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nexport const CONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nconst LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;\n"]},"sourceType":"module","hash":"aaef5755bf7e8cad496f2650af68ab9cd7e990f7"}
