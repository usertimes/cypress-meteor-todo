{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/idrismahjoubi/cypress-meteor-react/packages/autoupdate/autoupdate_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/autoupdate/autoupdate_server.js","filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/autoupdate/autoupdate_server.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"test","cwd":"/Users/idrismahjoubi/cypress-meteor-react","root":"/Users/idrismahjoubi/cypress-meteor-react","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/autoupdate/autoupdate_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/autoupdate/autoupdate_server.js"}},"code":"!function (module1) {\n  let _objectSpread;\n\n  module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n    default(v) {\n      _objectSpread = v;\n    }\n\n  }, 0);\n  module1.export({\n    Autoupdate: () => Autoupdate\n  });\n  let ClientVersions;\n  module1.link(\"./client_versions.js\", {\n    ClientVersions(v) {\n      ClientVersions = v;\n    }\n\n  }, 0);\n  let onMessage;\n  module1.link(\"meteor/inter-process-messaging\", {\n    onMessage(v) {\n      onMessage = v;\n    }\n\n  }, 1);\n\n  var Future = Npm.require(\"fibers/future\");\n\n  const Autoupdate = __meteor_runtime_config__.autoupdate = {\n    // Map from client architectures (web.browser, web.browser.legacy,\n    // web.cordova) to version fields { version, versionRefreshable,\n    // versionNonRefreshable, refreshable } that will be stored in\n    // ClientVersions documents (whose IDs are client architectures). This\n    // data gets serialized into the boilerplate because it's stored in\n    // __meteor_runtime_config__.autoupdate.versions.\n    versions: {}\n  };\n  // Stores acceptable client versions.\n  const clientVersions = new ClientVersions(); // The client hash includes __meteor_runtime_config__, so wait until\n  // all packages have loaded and have had a chance to populate the\n  // runtime config before using the client hash as our default auto\n  // update version id.\n  // Note: Tests allow people to override Autoupdate.autoupdateVersion before\n  // startup.\n\n  Autoupdate.autoupdateVersion = null;\n  Autoupdate.autoupdateVersionRefreshable = null;\n  Autoupdate.autoupdateVersionCordova = null;\n  Autoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\n  var syncQueue = new Meteor._SynchronousQueue();\n\n  function updateVersions(shouldReloadClientProgram) {\n    // Step 1: load the current client program on the server\n    if (shouldReloadClientProgram) {\n      WebAppInternals.reloadClientPrograms();\n    }\n\n    const {\n      // If the AUTOUPDATE_VERSION environment variable is defined, it takes\n      // precedence, but Autoupdate.autoupdateVersion is still supported as\n      // a fallback. In most cases neither of these values will be defined.\n      AUTOUPDATE_VERSION = Autoupdate.autoupdateVersion\n    } = process.env; // Step 2: update __meteor_runtime_config__.autoupdate.versions.\n\n    const clientArchs = Object.keys(WebApp.clientPrograms);\n    clientArchs.forEach(arch => {\n      Autoupdate.versions[arch] = {\n        version: AUTOUPDATE_VERSION || WebApp.calculateClientHash(arch),\n        versionRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashRefreshable(arch),\n        versionNonRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashNonRefreshable(arch),\n        versionReplaceable: AUTOUPDATE_VERSION || WebApp.calculateClientHashReplaceable(arch)\n      };\n    }); // Step 3: form the new client boilerplate which contains the updated\n    // assets and __meteor_runtime_config__.\n\n    if (shouldReloadClientProgram) {\n      WebAppInternals.generateBoilerplate();\n    } // Step 4: update the ClientVersions collection.\n    // We use `onListening` here because we need to use\n    // `WebApp.getRefreshableAssets`, which is only set after\n    // `WebApp.generateBoilerplate` is called by `main` in webapp.\n\n\n    WebApp.onListening(() => {\n      clientArchs.forEach(arch => {\n        const payload = _objectSpread(_objectSpread({}, Autoupdate.versions[arch]), {}, {\n          assets: WebApp.getRefreshableAssets(arch)\n        });\n\n        clientVersions.set(arch, payload);\n      });\n    });\n  }\n\n  Meteor.publish(\"meteor_autoupdate_clientVersions\", function (appId) {\n    // `null` happens when a client doesn't have an appId and passes\n    // `undefined` to `Meteor.subscribe`. `undefined` is translated to\n    // `null` as JSON doesn't have `undefined.\n    check(appId, Match.OneOf(String, undefined, null)); // Don't notify clients using wrong appId such as mobile apps built with a\n    // different server but pointing at the same local url\n\n    if (Autoupdate.appId && appId && Autoupdate.appId !== appId) return [];\n    const stop = clientVersions.watch((version, isNew) => {\n      (isNew ? this.added : this.changed).call(this, \"meteor_autoupdate_clientVersions\", version._id, version);\n    });\n    this.onStop(() => stop());\n    this.ready();\n  }, {\n    is_auto: true\n  });\n  Meteor.startup(function () {\n    updateVersions(false); // Force any connected clients that are still looking for these older\n    // document IDs to reload.\n\n    [\"version\", \"version-refreshable\", \"version-cordova\"].forEach(_id => {\n      clientVersions.set(_id, {\n        version: \"outdated\"\n      });\n    });\n  });\n  var fut = new Future(); // We only want 'refresh' to trigger 'updateVersions' AFTER onListen,\n  // so we add a queued task that waits for onListen before 'refresh' can queue\n  // tasks. Note that the `onListening` callbacks do not fire until after\n  // Meteor.startup, so there is no concern that the 'updateVersions' calls from\n  // 'refresh' will overlap with the `updateVersions` call from Meteor.startup.\n\n  syncQueue.queueTask(function () {\n    fut.wait();\n  });\n  WebApp.onListening(function () {\n    fut.return();\n  });\n\n  function enqueueVersionsRefresh() {\n    syncQueue.queueTask(function () {\n      updateVersions(true);\n    });\n  } // Listen for messages pertaining to the client-refresh topic.\n\n\n  onMessage(\"client-refresh\", enqueueVersionsRefresh); // Another way to tell the process to refresh: send SIGHUP signal\n\n  process.on('SIGHUP', Meteor.bindEnvironment(function () {\n    enqueueVersionsRefresh();\n  }, \"handling SIGHUP signal for refresh\"));\n}.call(this, module);","map":{"version":3,"sources":["packages/autoupdate/autoupdate_server.js"],"names":["_objectSpread","module1","link","default","v","export","Autoupdate","ClientVersions","onMessage","Future","Npm","require","__meteor_runtime_config__","autoupdate","versions","clientVersions","autoupdateVersion","autoupdateVersionRefreshable","autoupdateVersionCordova","appId","process","env","APP_ID","syncQueue","Meteor","_SynchronousQueue","updateVersions","shouldReloadClientProgram","WebAppInternals","reloadClientPrograms","AUTOUPDATE_VERSION","clientArchs","Object","keys","WebApp","clientPrograms","forEach","arch","version","calculateClientHash","versionRefreshable","calculateClientHashRefreshable","versionNonRefreshable","calculateClientHashNonRefreshable","versionReplaceable","calculateClientHashReplaceable","generateBoilerplate","onListening","payload","assets","getRefreshableAssets","set","publish","check","Match","OneOf","String","undefined","stop","watch","isNew","added","changed","call","_id","onStop","ready","is_auto","startup","fut","queueTask","wait","return","enqueueVersionsRefresh","on","bindEnvironment"],"mappings":"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","sourcesContent":["// Publish the current client versions for each client architecture\n// (web.browser, web.browser.legacy, web.cordova). When a client observes\n// a change in the versions associated with its client architecture,\n// it will refresh itself, either by swapping out CSS assets or by\n// reloading the page. Changes to the replaceable version are ignored\n// and handled by the hot-module-replacement package.\n//\n// There are four versions for any given client architecture: `version`,\n// `versionRefreshable`, `versionNonRefreshable`, and\n// `versionReplaceable`. The refreshable version is a hash of just the\n// client resources that are refreshable, such as CSS. The replaceable\n// version is a hash of files that can be updated with HMR. The\n// non-refreshable version is a hash of the rest of the client assets,\n// excluding the refreshable ones: HTML, JS that is not replaceable, and\n// static files in the `public` directory. The `version` version is a\n// combined hash of everything.\n//\n// If the environment variable `AUTOUPDATE_VERSION` is set, it will be\n// used in place of all client versions. You can use this variable to\n// control when the client reloads. For example, if you want to force a\n// reload only after major changes, use a custom AUTOUPDATE_VERSION and\n// change it only when something worth pushing to clients happens.\n//\n// The server publishes a `meteor_autoupdate_clientVersions` collection.\n// The ID of each document is the client architecture, and the fields of\n// the document are the versions described above.\n\nimport { ClientVersions } from \"./client_versions.js\";\nvar Future = Npm.require(\"fibers/future\");\n\nexport const Autoupdate = __meteor_runtime_config__.autoupdate = {\n  // Map from client architectures (web.browser, web.browser.legacy,\n  // web.cordova) to version fields { version, versionRefreshable,\n  // versionNonRefreshable, refreshable } that will be stored in\n  // ClientVersions documents (whose IDs are client architectures). This\n  // data gets serialized into the boilerplate because it's stored in\n  // __meteor_runtime_config__.autoupdate.versions.\n  versions: {}\n};\n\n// Stores acceptable client versions.\nconst clientVersions = new ClientVersions();\n\n// The client hash includes __meteor_runtime_config__, so wait until\n// all packages have loaded and have had a chance to populate the\n// runtime config before using the client hash as our default auto\n// update version id.\n\n// Note: Tests allow people to override Autoupdate.autoupdateVersion before\n// startup.\nAutoupdate.autoupdateVersion = null;\nAutoupdate.autoupdateVersionRefreshable = null;\nAutoupdate.autoupdateVersionCordova = null;\nAutoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\n\nvar syncQueue = new Meteor._SynchronousQueue();\n\nfunction updateVersions(shouldReloadClientProgram) {\n  // Step 1: load the current client program on the server\n  if (shouldReloadClientProgram) {\n    WebAppInternals.reloadClientPrograms();\n  }\n\n  const {\n    // If the AUTOUPDATE_VERSION environment variable is defined, it takes\n    // precedence, but Autoupdate.autoupdateVersion is still supported as\n    // a fallback. In most cases neither of these values will be defined.\n    AUTOUPDATE_VERSION = Autoupdate.autoupdateVersion\n  } = process.env;\n\n  // Step 2: update __meteor_runtime_config__.autoupdate.versions.\n  const clientArchs = Object.keys(WebApp.clientPrograms);\n  clientArchs.forEach(arch => {\n    Autoupdate.versions[arch] = {\n      version: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHash(arch),\n      versionRefreshable: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHashRefreshable(arch),\n      versionNonRefreshable: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHashNonRefreshable(arch),\n      versionReplaceable: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHashReplaceable(arch)\n    };\n  });\n\n  // Step 3: form the new client boilerplate which contains the updated\n  // assets and __meteor_runtime_config__.\n  if (shouldReloadClientProgram) {\n    WebAppInternals.generateBoilerplate();\n  }\n\n  // Step 4: update the ClientVersions collection.\n  // We use `onListening` here because we need to use\n  // `WebApp.getRefreshableAssets`, which is only set after\n  // `WebApp.generateBoilerplate` is called by `main` in webapp.\n  WebApp.onListening(() => {\n    clientArchs.forEach(arch => {\n      const payload = {\n        ...Autoupdate.versions[arch],\n        assets: WebApp.getRefreshableAssets(arch),\n      };\n\n      clientVersions.set(arch, payload);\n    });\n  });\n}\n\nMeteor.publish(\n  \"meteor_autoupdate_clientVersions\",\n  function (appId) {\n    // `null` happens when a client doesn't have an appId and passes\n    // `undefined` to `Meteor.subscribe`. `undefined` is translated to\n    // `null` as JSON doesn't have `undefined.\n    check(appId, Match.OneOf(String, undefined, null));\n\n    // Don't notify clients using wrong appId such as mobile apps built with a\n    // different server but pointing at the same local url\n    if (Autoupdate.appId && appId && Autoupdate.appId !== appId)\n      return [];\n\n    const stop = clientVersions.watch((version, isNew) => {\n      (isNew ? this.added : this.changed)\n        .call(this, \"meteor_autoupdate_clientVersions\", version._id, version);\n    });\n\n    this.onStop(() => stop());\n    this.ready();\n  },\n  {is_auto: true}\n);\n\nMeteor.startup(function () {\n  updateVersions(false);\n\n  // Force any connected clients that are still looking for these older\n  // document IDs to reload.\n  [\"version\",\n   \"version-refreshable\",\n   \"version-cordova\",\n  ].forEach(_id => {\n    clientVersions.set(_id, {\n      version: \"outdated\"\n    });\n  });\n});\n\nvar fut = new Future();\n\n// We only want 'refresh' to trigger 'updateVersions' AFTER onListen,\n// so we add a queued task that waits for onListen before 'refresh' can queue\n// tasks. Note that the `onListening` callbacks do not fire until after\n// Meteor.startup, so there is no concern that the 'updateVersions' calls from\n// 'refresh' will overlap with the `updateVersions` call from Meteor.startup.\n\nsyncQueue.queueTask(function () {\n  fut.wait();\n});\n\nWebApp.onListening(function () {\n  fut.return();\n});\n\nfunction enqueueVersionsRefresh() {\n  syncQueue.queueTask(function () {\n    updateVersions(true);\n  });\n}\n\n// Listen for messages pertaining to the client-refresh topic.\nimport { onMessage } from \"meteor/inter-process-messaging\";\nonMessage(\"client-refresh\", enqueueVersionsRefresh);\n\n// Another way to tell the process to refresh: send SIGHUP signal\nprocess.on('SIGHUP', Meteor.bindEnvironment(function () {\n  enqueueVersionsRefresh();\n}, \"handling SIGHUP signal for refresh\"));\n"]},"sourceType":"module","hash":"8f0ae3a1fc099026f90c156bf85ccc2b24af4571"}
