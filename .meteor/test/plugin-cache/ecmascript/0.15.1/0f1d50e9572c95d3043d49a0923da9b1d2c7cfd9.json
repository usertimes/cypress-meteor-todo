{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/idrismahjoubi/cypress-meteor-react/packages/srp/srp.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/srp/srp.js","filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/srp/srp.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"test","cwd":"/Users/idrismahjoubi/cypress-meteor-react","root":"/Users/idrismahjoubi/cypress-meteor-react","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/srp/srp.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/srp/srp.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  SRP: () => SRP\n});\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 0);\nlet BigInteger;\nmodule.link(\"./biginteger\", {\n  default(v) {\n    BigInteger = v;\n  }\n\n}, 1);\nconst SRP = {};\n\n/**\n * Generate a new SRP verifier. Password is the plaintext password.\n *\n * options is optional and can include:\n * - identity: String. The SRP username to user. Mostly this is passed\n *   in for testing.  Random UUID if not provided.\n * - hashedIdentityAndPassword: combined identity and password, already hashed, for the SRP to bcrypt upgrade path.\n * - salt: String. A salt to use.  Mostly this is passed in for\n *   testing.  Random UUID if not provided.\n * - SRP parameters (see _defaults and paramsFromOptions below)\n */\nSRP.generateVerifier = function (password, options) {\n  const params = paramsFromOptions(options);\n  const salt = options && options.salt || Random.secret();\n  let identity;\n  let hashedIdentityAndPassword = options && options.hashedIdentityAndPassword;\n\n  if (!hashedIdentityAndPassword) {\n    identity = options && options.identity || Random.secret();\n    hashedIdentityAndPassword = params.hash(identity + \":\" + password);\n  }\n\n  const x = params.hash(salt + hashedIdentityAndPassword);\n  const xi = new BigInteger(x, 16);\n  const v = params.g.modPow(xi, params.N);\n  return {\n    identity,\n    salt,\n    verifier: v.toString(16)\n  };\n}; // For use with check().\n\n\nSRP.matchVerifier = {\n  identity: String,\n  salt: String,\n  verifier: String\n};\n/**\n * Default parameter values for SRP.\n *\n */\n\nconst _defaults = {\n  hash: x => SHA256(x).toLowerCase(),\n  N: new BigInteger(\"EEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE48E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B297BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9AFD5138FE8376435B9FC61D2FC0EB06E3\", 16),\n  g: new BigInteger(\"2\")\n};\n_defaults.k = new BigInteger(_defaults.hash(_defaults.N.toString(16) + _defaults.g.toString(16)), 16);\n/**\n * Process an options hash to create SRP parameters.\n *\n * Options can include:\n * - hash: Function. Defaults to SHA256.\n * - N: String or BigInteger. Defaults to 1024 bit value from RFC 5054\n * - g: String or BigInteger. Defaults to 2.\n * - k: String or BigInteger. Defaults to hash(N, g)\n */\n\nconst paramsFromOptions = function (options) {\n  if (!options) // fast path\n    return _defaults;\n\n  var ret = _objectSpread({}, _defaults);\n\n  ['N', 'g', 'k'].forEach(p => {\n    if (options[p]) {\n      if (typeof options[p] === \"string\") ret[p] = new BigInteger(options[p], 16);else if (options[p] instanceof BigInteger) ret[p] = options[p];else throw new Error(\"Invalid parameter: \" + p);\n    }\n  });\n  if (options.hash) ret.hash = x => options.hash(x).toLowerCase();\n\n  if (!options.k && (options.N || options.g || options.hash)) {\n    ret.k = ret.hash(ret.N.toString(16) + ret.g.toString(16));\n  }\n\n  return ret;\n};","map":{"version":3,"sources":["packages/srp/srp.js"],"names":["_objectSpread","module","link","default","v","export","SRP","Random","BigInteger","generateVerifier","password","options","params","paramsFromOptions","salt","secret","identity","hashedIdentityAndPassword","hash","x","xi","g","modPow","N","verifier","toString","matchVerifier","String","_defaults","SHA256","toLowerCase","k","ret","forEach","p","Error"],"mappings":"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","sourcesContent":["import { Random } from 'meteor/random';\nimport BigInteger from './biginteger';\n\n// This package contains just enough of the original SRP code to\n// support the backwards-compatibility upgrade path.\n//\n// An SRP (and possibly also accounts-srp) package should eventually be\n// available in Atmosphere so that users can continue to use SRP if they\n// want to.\n\nexport const SRP = {};\n\n/**\n * Generate a new SRP verifier. Password is the plaintext password.\n *\n * options is optional and can include:\n * - identity: String. The SRP username to user. Mostly this is passed\n *   in for testing.  Random UUID if not provided.\n * - hashedIdentityAndPassword: combined identity and password, already hashed, for the SRP to bcrypt upgrade path.\n * - salt: String. A salt to use.  Mostly this is passed in for\n *   testing.  Random UUID if not provided.\n * - SRP parameters (see _defaults and paramsFromOptions below)\n */\nSRP.generateVerifier = function (password, options) {\n  const params = paramsFromOptions(options);\n\n  const salt = (options && options.salt) || Random.secret();\n\n  let identity;\n  let hashedIdentityAndPassword = options && options.hashedIdentityAndPassword;\n  if (!hashedIdentityAndPassword) {\n    identity = (options && options.identity) || Random.secret();\n    hashedIdentityAndPassword = params.hash(identity + \":\" + password);\n  }\n\n  const x = params.hash(salt + hashedIdentityAndPassword);\n  const xi = new BigInteger(x, 16);\n  const v = params.g.modPow(xi, params.N);\n\n  return {\n    identity,\n    salt,\n    verifier: v.toString(16)\n  };\n};\n\n// For use with check().\nSRP.matchVerifier = {\n  identity: String,\n  salt: String,\n  verifier: String\n};\n\n\n/**\n * Default parameter values for SRP.\n *\n */\nconst _defaults = {\n  hash: x => SHA256(x).toLowerCase(),\n  N: new BigInteger(\"EEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE48E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B297BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9AFD5138FE8376435B9FC61D2FC0EB06E3\", 16),\n  g: new BigInteger(\"2\")\n};\n\n_defaults.k = new BigInteger(\n  _defaults.hash(\n    _defaults.N.toString(16) +\n      _defaults.g.toString(16)),\n  16);\n\n/**\n * Process an options hash to create SRP parameters.\n *\n * Options can include:\n * - hash: Function. Defaults to SHA256.\n * - N: String or BigInteger. Defaults to 1024 bit value from RFC 5054\n * - g: String or BigInteger. Defaults to 2.\n * - k: String or BigInteger. Defaults to hash(N, g)\n */\nconst paramsFromOptions = function (options) {\n  if (!options) // fast path\n    return _defaults;\n\n  var ret = { ..._defaults };\n\n  ['N', 'g', 'k'].forEach(p => {\n    if (options[p]) {\n      if (typeof options[p] === \"string\")\n        ret[p] = new BigInteger(options[p], 16);\n      else if (options[p] instanceof BigInteger)\n        ret[p] = options[p];\n      else\n        throw new Error(\"Invalid parameter: \" + p);\n    }\n  });\n\n  if (options.hash)\n    ret.hash = x => options.hash(x).toLowerCase();\n\n  if (!options.k && (options.N || options.g || options.hash)) {\n    ret.k = ret.hash(ret.N.toString(16) + ret.g.toString(16));\n  }\n\n  return ret;\n};\n"]},"sourceType":"module","hash":"0f1d50e9572c95d3043d49a0923da9b1d2c7cfd9"}
