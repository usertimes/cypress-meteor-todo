{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/idrismahjoubi/cypress-meteor-react/packages/socket-stream-client/browser.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/socket-stream-client/browser.js","filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/socket-stream-client/browser.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"test","cwd":"/Users/idrismahjoubi/cypress-meteor-react","root":"/Users/idrismahjoubi/cypress-meteor-react","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/socket-stream-client/browser.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/socket-stream-client/browser.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  ClientStream: () => ClientStream\n});\nlet toSockjsUrl, toWebsocketUrl;\nmodule.link(\"./urls.js\", {\n  toSockjsUrl(v) {\n    toSockjsUrl = v;\n  },\n\n  toWebsocketUrl(v) {\n    toWebsocketUrl = v;\n  }\n\n}, 0);\nlet StreamClientCommon;\nmodule.link(\"./common.js\", {\n  StreamClientCommon(v) {\n    StreamClientCommon = v;\n  }\n\n}, 1);\nmodule.link(\"./sockjs-0.3.4.js\");\n\nclass ClientStream extends StreamClientCommon {\n  // @param url {String} URL to Meteor app\n  //   \"http://subdomain.meteor.com/\" or \"/\" or\n  //   \"ddp+sockjs://foo-**.meteor.com/sockjs\"\n  constructor(url, options) {\n    super(options);\n\n    this._initCommon(this.options); //// Constants\n    // how long between hearing heartbeat from the server until we declare\n    // the connection dead. heartbeats come every 45s (stream_server.js)\n    //\n    // NOTE: this is a older timeout mechanism. We now send heartbeats at\n    // the DDP level (https://github.com/meteor/meteor/pull/1865), and\n    // expect those timeouts to kill a non-responsive connection before\n    // this timeout fires. This is kept around for compatibility (when\n    // talking to a server that doesn't support DDP heartbeats) and can be\n    // removed later.\n\n\n    this.HEARTBEAT_TIMEOUT = 100 * 1000;\n    this.rawUrl = url;\n    this.socket = null;\n    this.lastError = null;\n    this.heartbeatTimer = null; // Listen to global 'online' event if we are running in a browser.\n    // (IE8 does not support addEventListener)\n\n    if (typeof window !== 'undefined' && window.addEventListener) window.addEventListener('online', this._online.bind(this), false\n    /* useCapture. make FF3.6 happy. */\n    ); //// Kickoff!\n\n    this._launchConnection();\n  } // data is a utf8 string. Data sent while not connected is dropped on\n  // the floor, and it is up the user of this API to retransmit lost\n  // messages on 'reset'\n\n\n  send(data) {\n    if (this.currentStatus.connected) {\n      this.socket.send(data);\n    }\n  } // Changes where this connection points\n\n\n  _changeUrl(url) {\n    this.rawUrl = url;\n  }\n\n  _connected() {\n    if (this.connectionTimer) {\n      clearTimeout(this.connectionTimer);\n      this.connectionTimer = null;\n    }\n\n    if (this.currentStatus.connected) {\n      // already connected. do nothing. this probably shouldn't happen.\n      return;\n    } // update status\n\n\n    this.currentStatus.status = 'connected';\n    this.currentStatus.connected = true;\n    this.currentStatus.retryCount = 0;\n    this.statusChanged(); // fire resets. This must come after status change so that clients\n    // can call send from within a reset callback.\n\n    this.forEachCallback('reset', callback => {\n      callback();\n    });\n  }\n\n  _cleanup(maybeError) {\n    this._clearConnectionAndHeartbeatTimers();\n\n    if (this.socket) {\n      this.socket.onmessage = this.socket.onclose = this.socket.onerror = this.socket.onheartbeat = () => {};\n\n      this.socket.close();\n      this.socket = null;\n    }\n\n    this.forEachCallback('disconnect', callback => {\n      callback(maybeError);\n    });\n  }\n\n  _clearConnectionAndHeartbeatTimers() {\n    if (this.connectionTimer) {\n      clearTimeout(this.connectionTimer);\n      this.connectionTimer = null;\n    }\n\n    if (this.heartbeatTimer) {\n      clearTimeout(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  _heartbeat_timeout() {\n    console.log('Connection timeout. No sockjs heartbeat received.');\n\n    this._lostConnection(new this.ConnectionError(\"Heartbeat timed out\"));\n  }\n\n  _heartbeat_received() {\n    // If we've already permanently shut down this stream, the timeout is\n    // already cleared, and we don't need to set it again.\n    if (this._forcedToDisconnect) return;\n    if (this.heartbeatTimer) clearTimeout(this.heartbeatTimer);\n    this.heartbeatTimer = setTimeout(this._heartbeat_timeout.bind(this), this.HEARTBEAT_TIMEOUT);\n  }\n\n  _sockjsProtocolsWhitelist() {\n    // only allow polling protocols. no streaming.  streaming\n    // makes safari spin.\n    var protocolsWhitelist = ['xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling']; // iOS 4 and 5 and below crash when using websockets over certain\n    // proxies. this seems to be resolved with iOS 6. eg\n    // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.\n    //\n    // iOS <4 doesn't support websockets at all so sockjs will just\n    // immediately fall back to http\n\n    var noWebsockets = navigator && /iPhone|iPad|iPod/.test(navigator.userAgent) && /OS 4_|OS 5_/.test(navigator.userAgent);\n    if (!noWebsockets) protocolsWhitelist = ['websocket'].concat(protocolsWhitelist);\n    return protocolsWhitelist;\n  }\n\n  _launchConnection() {\n    this._cleanup(); // cleanup the old socket, if there was one.\n\n\n    var options = _objectSpread({\n      protocols_whitelist: this._sockjsProtocolsWhitelist()\n    }, this.options._sockjsOptions);\n\n    const hasSockJS = typeof SockJS === \"function\";\n    this.socket = hasSockJS // Convert raw URL to SockJS URL each time we open a connection, so\n    // that we can connect to random hostnames and get around browser\n    // per-host connection limits.\n    ? new SockJS(toSockjsUrl(this.rawUrl), undefined, options) : new WebSocket(toWebsocketUrl(this.rawUrl));\n\n    this.socket.onopen = data => {\n      this.lastError = null;\n\n      this._connected();\n    };\n\n    this.socket.onmessage = data => {\n      this.lastError = null;\n\n      this._heartbeat_received();\n\n      if (this.currentStatus.connected) {\n        this.forEachCallback('message', callback => {\n          callback(data.data);\n        });\n      }\n    };\n\n    this.socket.onclose = () => {\n      this._lostConnection();\n    };\n\n    this.socket.onerror = error => {\n      const {\n        lastError\n      } = this;\n      this.lastError = error;\n      if (lastError) return;\n      console.log('stream error', error, new Date().toDateString());\n    };\n\n    this.socket.onheartbeat = () => {\n      this.lastError = null;\n\n      this._heartbeat_received();\n    };\n\n    if (this.connectionTimer) clearTimeout(this.connectionTimer);\n    this.connectionTimer = setTimeout(() => {\n      this._lostConnection(new this.ConnectionError(\"DDP connection timed out\"));\n    }, this.CONNECT_TIMEOUT);\n  }\n\n}","map":{"version":3,"sources":["packages/socket-stream-client/browser.js"],"names":["_objectSpread","module","link","default","v","export","ClientStream","toSockjsUrl","toWebsocketUrl","StreamClientCommon","constructor","url","options","_initCommon","HEARTBEAT_TIMEOUT","rawUrl","socket","lastError","heartbeatTimer","window","addEventListener","_online","bind","_launchConnection","send","data","currentStatus","connected","_changeUrl","_connected","connectionTimer","clearTimeout","status","retryCount","statusChanged","forEachCallback","callback","_cleanup","maybeError","_clearConnectionAndHeartbeatTimers","onmessage","onclose","onerror","onheartbeat","close","_heartbeat_timeout","console","log","_lostConnection","ConnectionError","_heartbeat_received","_forcedToDisconnect","setTimeout","_sockjsProtocolsWhitelist","protocolsWhitelist","noWebsockets","navigator","test","userAgent","concat","protocols_whitelist","_sockjsOptions","hasSockJS","SockJS","undefined","WebSocket","onopen","error","Date","toDateString","CONNECT_TIMEOUT"],"mappings":"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","sourcesContent":["import {\n  toSockjsUrl,\n  toWebsocketUrl,\n} from \"./urls.js\";\n\nimport { StreamClientCommon } from \"./common.js\";\n\n// Statically importing SockJS here will prevent native WebSocket usage\n// below (in favor of SockJS), but will ensure maximum compatibility for\n// clients stuck in unusual networking environments.\nimport \"./sockjs-0.3.4.js\";\n\nexport class ClientStream extends StreamClientCommon {\n  // @param url {String} URL to Meteor app\n  //   \"http://subdomain.meteor.com/\" or \"/\" or\n  //   \"ddp+sockjs://foo-**.meteor.com/sockjs\"\n  constructor(url, options) {\n    super(options);\n\n    this._initCommon(this.options);\n\n    //// Constants\n\n    // how long between hearing heartbeat from the server until we declare\n    // the connection dead. heartbeats come every 45s (stream_server.js)\n    //\n    // NOTE: this is a older timeout mechanism. We now send heartbeats at\n    // the DDP level (https://github.com/meteor/meteor/pull/1865), and\n    // expect those timeouts to kill a non-responsive connection before\n    // this timeout fires. This is kept around for compatibility (when\n    // talking to a server that doesn't support DDP heartbeats) and can be\n    // removed later.\n    this.HEARTBEAT_TIMEOUT = 100 * 1000;\n\n    this.rawUrl = url;\n    this.socket = null;\n    this.lastError = null;\n\n    this.heartbeatTimer = null;\n\n    // Listen to global 'online' event if we are running in a browser.\n    // (IE8 does not support addEventListener)\n    if (typeof window !== 'undefined' && window.addEventListener)\n      window.addEventListener(\n        'online',\n        this._online.bind(this),\n        false /* useCapture. make FF3.6 happy. */\n      );\n\n    //// Kickoff!\n    this._launchConnection();\n  }\n\n  // data is a utf8 string. Data sent while not connected is dropped on\n  // the floor, and it is up the user of this API to retransmit lost\n  // messages on 'reset'\n  send(data) {\n    if (this.currentStatus.connected) {\n      this.socket.send(data);\n    }\n  }\n\n  // Changes where this connection points\n  _changeUrl(url) {\n    this.rawUrl = url;\n  }\n\n  _connected() {\n    if (this.connectionTimer) {\n      clearTimeout(this.connectionTimer);\n      this.connectionTimer = null;\n    }\n\n    if (this.currentStatus.connected) {\n      // already connected. do nothing. this probably shouldn't happen.\n      return;\n    }\n\n    // update status\n    this.currentStatus.status = 'connected';\n    this.currentStatus.connected = true;\n    this.currentStatus.retryCount = 0;\n    this.statusChanged();\n\n    // fire resets. This must come after status change so that clients\n    // can call send from within a reset callback.\n    this.forEachCallback('reset', callback => {\n      callback();\n    });\n  }\n\n  _cleanup(maybeError) {\n    this._clearConnectionAndHeartbeatTimers();\n    if (this.socket) {\n      this.socket.onmessage = this.socket.onclose = this.socket.onerror = this.socket.onheartbeat = () => {};\n      this.socket.close();\n      this.socket = null;\n    }\n\n    this.forEachCallback('disconnect', callback => {\n      callback(maybeError);\n    });\n  }\n\n  _clearConnectionAndHeartbeatTimers() {\n    if (this.connectionTimer) {\n      clearTimeout(this.connectionTimer);\n      this.connectionTimer = null;\n    }\n    if (this.heartbeatTimer) {\n      clearTimeout(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  _heartbeat_timeout() {\n    console.log('Connection timeout. No sockjs heartbeat received.');\n    this._lostConnection(new this.ConnectionError(\"Heartbeat timed out\"));\n  }\n\n  _heartbeat_received() {\n    // If we've already permanently shut down this stream, the timeout is\n    // already cleared, and we don't need to set it again.\n    if (this._forcedToDisconnect) return;\n    if (this.heartbeatTimer) clearTimeout(this.heartbeatTimer);\n    this.heartbeatTimer = setTimeout(\n      this._heartbeat_timeout.bind(this),\n      this.HEARTBEAT_TIMEOUT\n    );\n  }\n\n  _sockjsProtocolsWhitelist() {\n    // only allow polling protocols. no streaming.  streaming\n    // makes safari spin.\n    var protocolsWhitelist = [\n      'xdr-polling',\n      'xhr-polling',\n      'iframe-xhr-polling',\n      'jsonp-polling'\n    ];\n\n    // iOS 4 and 5 and below crash when using websockets over certain\n    // proxies. this seems to be resolved with iOS 6. eg\n    // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.\n    //\n    // iOS <4 doesn't support websockets at all so sockjs will just\n    // immediately fall back to http\n    var noWebsockets =\n      navigator &&\n      /iPhone|iPad|iPod/.test(navigator.userAgent) &&\n      /OS 4_|OS 5_/.test(navigator.userAgent);\n\n    if (!noWebsockets)\n      protocolsWhitelist = ['websocket'].concat(protocolsWhitelist);\n\n    return protocolsWhitelist;\n  }\n\n  _launchConnection() {\n    this._cleanup(); // cleanup the old socket, if there was one.\n\n    var options = {\n      protocols_whitelist: this._sockjsProtocolsWhitelist(),\n      ...this.options._sockjsOptions\n    };\n\n    const hasSockJS = typeof SockJS === \"function\";\n\n    this.socket = hasSockJS\n      // Convert raw URL to SockJS URL each time we open a connection, so\n      // that we can connect to random hostnames and get around browser\n      // per-host connection limits.\n      ? new SockJS(toSockjsUrl(this.rawUrl), undefined, options)\n      : new WebSocket(toWebsocketUrl(this.rawUrl));\n\n    this.socket.onopen = data => {\n      this.lastError = null;\n      this._connected();\n    };\n\n    this.socket.onmessage = data => {\n      this.lastError = null;\n      this._heartbeat_received();\n      if (this.currentStatus.connected) {\n        this.forEachCallback('message', callback => {\n          callback(data.data);\n        });\n      }\n    };\n\n    this.socket.onclose = () => {\n      this._lostConnection();\n    };\n\n    this.socket.onerror = error => {\n      const { lastError } = this;\n      this.lastError = error;\n      if (lastError) return;\n      console.log(\n        'stream error',\n        error,\n        new Date().toDateString()\n      );\n    };\n\n    this.socket.onheartbeat = () => {\n      this.lastError = null;\n      this._heartbeat_received();\n    };\n\n    if (this.connectionTimer) clearTimeout(this.connectionTimer);\n    this.connectionTimer = setTimeout(() => {\n      this._lostConnection(\n        new this.ConnectionError(\"DDP connection timed out\")\n      );\n    }, this.CONNECT_TIMEOUT);\n  }\n}\n"]},"sourceType":"module","hash":"b9350685f4823afcdec85165717ffd8040468b97"}
