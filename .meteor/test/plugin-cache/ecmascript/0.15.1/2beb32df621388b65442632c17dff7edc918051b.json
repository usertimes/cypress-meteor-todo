{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/idrismahjoubi/cypress-meteor-react/packages/autoupdate/client_versions.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/autoupdate/client_versions.js","filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/autoupdate/client_versions.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"test","cwd":"/Users/idrismahjoubi/cypress-meteor-react","root":"/Users/idrismahjoubi/cypress-meteor-react","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/autoupdate/client_versions.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/autoupdate/client_versions.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  ClientVersions: () => ClientVersions\n});\nlet Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker(v) {\n    Tracker = v;\n  }\n\n}, 0);\n\nclass ClientVersions {\n  constructor() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  } // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n\n\n  createStore() {\n    return {\n      update: (_ref) => {\n        let {\n          id,\n          msg,\n          fields\n        } = _ref;\n\n        if (msg === \"added\" || msg === \"changed\") {\n          this.set(id, fields);\n        }\n      }\n    };\n  }\n\n  hasVersions() {\n    return this._versions.size > 0;\n  }\n\n  get(id) {\n    return this._versions.get(id);\n  } // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n\n\n  set(id, fields) {\n    let version = this._versions.get(id);\n\n    let isNew = false;\n\n    if (version) {\n      Object.assign(version, fields);\n    } else {\n      version = _objectSpread({\n        _id: id\n      }, fields);\n      isNew = true;\n\n      this._versions.set(id, version);\n    }\n\n    this._watchCallbacks.forEach((_ref2) => {\n      let {\n        fn,\n        filter\n      } = _ref2;\n\n      if (!filter || filter === version._id) {\n        fn(version, isNew);\n      }\n    });\n  } // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n\n\n  watch(fn) {\n    let {\n      skipInitial,\n      filter\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!skipInitial) {\n      const resolved = Promise.resolve();\n\n      this._versions.forEach(version => {\n        if (!filter || filter === version._id) {\n          resolved.then(() => fn(version, true));\n        }\n      });\n    }\n\n    const callback = {\n      fn,\n      filter\n    };\n\n    this._watchCallbacks.add(callback);\n\n    return () => this._watchCallbacks.delete(callback);\n  } // A reactive data source for `Autoupdate.newClientAvailable`.\n\n\n  newClientAvailable(id, fields, currentVersion) {\n    function isNewVersion(version) {\n      return version._id === id && fields.some(field => version[field] !== currentVersion[field]);\n    }\n\n    const dependency = new Tracker.Dependency();\n    const version = this.get(id);\n    dependency.depend();\n    const stop = this.watch(version => {\n      if (isNewVersion(version)) {\n        dependency.changed();\n        stop();\n      }\n    }, {\n      skipInitial: true\n    });\n    return !!version && isNewVersion(version);\n  }\n\n}","map":{"version":3,"sources":["packages/autoupdate/client_versions.js"],"names":["_objectSpread","module","link","default","v","export","ClientVersions","Tracker","constructor","_versions","Map","_watchCallbacks","Set","createStore","update","id","msg","fields","set","hasVersions","size","get","version","isNew","Object","assign","_id","forEach","fn","filter","watch","skipInitial","resolved","Promise","resolve","then","callback","add","delete","newClientAvailable","currentVersion","isNewVersion","some","field","dependency","Dependency","depend","stop","changed"],"mappings":"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","sourcesContent":["import { Tracker } from \"meteor/tracker\";\n\nexport class ClientVersions {\n  constructor() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  }\n\n  // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n  createStore() {\n    return {\n      update: ({ id, msg, fields }) => {\n        if (msg === \"added\" || msg === \"changed\") {\n          this.set(id, fields);\n        }\n      }\n    };\n  }\n\n  hasVersions() {\n    return this._versions.size > 0;\n  }\n\n  get(id) {\n    return this._versions.get(id);\n  }\n\n  // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  set(id, fields) {\n    let version = this._versions.get(id);\n    let isNew = false;\n\n    if (version) {\n      Object.assign(version, fields);\n    } else {\n      version = {\n        _id: id,\n        ...fields\n      };\n\n      isNew = true;\n      this._versions.set(id, version);\n    }\n\n    this._watchCallbacks.forEach(({ fn, filter }) => {\n      if (! filter || filter === version._id) {\n        fn(version, isNew);\n      }\n    });\n  }\n\n  // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  watch(fn, { skipInitial, filter } = {}) {\n    if (! skipInitial) {\n      const resolved = Promise.resolve();\n\n      this._versions.forEach((version) => {\n        if (! filter || filter === version._id) {\n          resolved.then(() => fn(version, true));\n        }\n      });\n    }\n\n    const callback = { fn, filter };\n    this._watchCallbacks.add(callback);\n\n    return () => this._watchCallbacks.delete(callback);\n  }\n\n  // A reactive data source for `Autoupdate.newClientAvailable`.\n  newClientAvailable(id, fields, currentVersion) {\n    function isNewVersion(version) {\n      return (\n        version._id === id &&\n        fields.some((field) => version[field] !== currentVersion[field])\n      );\n    }\n\n    const dependency = new Tracker.Dependency();\n    const version = this.get(id);\n\n    dependency.depend();\n\n    const stop = this.watch(\n      (version) => {\n        if (isNewVersion(version)) {\n          dependency.changed();\n          stop();\n        }\n      },\n      { skipInitial: true }\n    );\n\n    return !! version && isNewVersion(version);\n  }\n}\n"]},"sourceType":"module","hash":"2beb32df621388b65442632c17dff7edc918051b"}
