{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/idrismahjoubi/cypress-meteor-react/packages/autoupdate/client_versions.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/autoupdate/client_versions.js","filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/autoupdate/client_versions.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"test","cwd":"/Users/idrismahjoubi/cypress-meteor-react","root":"/Users/idrismahjoubi/cypress-meteor-react","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/autoupdate/client_versions.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/autoupdate/client_versions.js"}},"code":"var _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  ClientVersions: function () {\n    return ClientVersions;\n  }\n});\nvar Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 0);\n\nvar ClientVersions = /*#__PURE__*/function () {\n  function ClientVersions() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  } // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n\n\n  var _proto = ClientVersions.prototype;\n\n  _proto.createStore = function () {\n    function createStore() {\n      var _this = this;\n\n      return {\n        update: function (_ref) {\n          var id = _ref.id,\n              msg = _ref.msg,\n              fields = _ref.fields;\n\n          if (msg === \"added\" || msg === \"changed\") {\n            _this.set(id, fields);\n          }\n        }\n      };\n    }\n\n    return createStore;\n  }();\n\n  _proto.hasVersions = function () {\n    function hasVersions() {\n      return this._versions.size > 0;\n    }\n\n    return hasVersions;\n  }();\n\n  _proto.get = function () {\n    function get(id) {\n      return this._versions.get(id);\n    }\n\n    return get;\n  }() // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  ;\n\n  _proto.set = function () {\n    function set(id, fields) {\n      var version = this._versions.get(id);\n\n      var isNew = false;\n\n      if (version) {\n        Object.assign(version, fields);\n      } else {\n        version = _objectSpread({\n          _id: id\n        }, fields);\n        isNew = true;\n\n        this._versions.set(id, version);\n      }\n\n      this._watchCallbacks.forEach(function (_ref2) {\n        var fn = _ref2.fn,\n            filter = _ref2.filter;\n\n        if (!filter || filter === version._id) {\n          fn(version, isNew);\n        }\n      });\n    }\n\n    return set;\n  }() // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  ;\n\n  _proto.watch = function () {\n    function watch(fn) {\n      var _this2 = this;\n\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          skipInitial = _ref3.skipInitial,\n          filter = _ref3.filter;\n\n      if (!skipInitial) {\n        var resolved = Promise.resolve();\n\n        this._versions.forEach(function (version) {\n          if (!filter || filter === version._id) {\n            resolved.then(function () {\n              return fn(version, true);\n            });\n          }\n        });\n      }\n\n      var callback = {\n        fn: fn,\n        filter: filter\n      };\n\n      this._watchCallbacks.add(callback);\n\n      return function () {\n        return _this2._watchCallbacks.delete(callback);\n      };\n    }\n\n    return watch;\n  }() // A reactive data source for `Autoupdate.newClientAvailable`.\n  ;\n\n  _proto.newClientAvailable = function () {\n    function newClientAvailable(id, fields, currentVersion) {\n      function isNewVersion(version) {\n        return version._id === id && fields.some(function (field) {\n          return version[field] !== currentVersion[field];\n        });\n      }\n\n      var dependency = new Tracker.Dependency();\n      var version = this.get(id);\n      dependency.depend();\n      var stop = this.watch(function (version) {\n        if (isNewVersion(version)) {\n          dependency.changed();\n          stop();\n        }\n      }, {\n        skipInitial: true\n      });\n      return !!version && isNewVersion(version);\n    }\n\n    return newClientAvailable;\n  }();\n\n  return ClientVersions;\n}();","map":{"version":3,"sources":["packages/autoupdate/client_versions.js"],"names":["_objectSpread","module","link","default","v","export","ClientVersions","Tracker","_versions","Map","_watchCallbacks","Set","createStore","update","id","msg","fields","set","hasVersions","size","get","version","isNew","Object","assign","_id","forEach","fn","filter","watch","skipInitial","resolved","Promise","resolve","then","callback","add","delete","newClientAvailable","currentVersion","isNewVersion","some","field","dependency","Dependency","depend","stop","changed"],"mappings":"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","sourcesContent":["import { Tracker } from \"meteor/tracker\";\n\nexport class ClientVersions {\n  constructor() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  }\n\n  // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n  createStore() {\n    return {\n      update: ({ id, msg, fields }) => {\n        if (msg === \"added\" || msg === \"changed\") {\n          this.set(id, fields);\n        }\n      }\n    };\n  }\n\n  hasVersions() {\n    return this._versions.size > 0;\n  }\n\n  get(id) {\n    return this._versions.get(id);\n  }\n\n  // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  set(id, fields) {\n    let version = this._versions.get(id);\n    let isNew = false;\n\n    if (version) {\n      Object.assign(version, fields);\n    } else {\n      version = {\n        _id: id,\n        ...fields\n      };\n\n      isNew = true;\n      this._versions.set(id, version);\n    }\n\n    this._watchCallbacks.forEach(({ fn, filter }) => {\n      if (! filter || filter === version._id) {\n        fn(version, isNew);\n      }\n    });\n  }\n\n  // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  watch(fn, { skipInitial, filter } = {}) {\n    if (! skipInitial) {\n      const resolved = Promise.resolve();\n\n      this._versions.forEach((version) => {\n        if (! filter || filter === version._id) {\n          resolved.then(() => fn(version, true));\n        }\n      });\n    }\n\n    const callback = { fn, filter };\n    this._watchCallbacks.add(callback);\n\n    return () => this._watchCallbacks.delete(callback);\n  }\n\n  // A reactive data source for `Autoupdate.newClientAvailable`.\n  newClientAvailable(id, fields, currentVersion) {\n    function isNewVersion(version) {\n      return (\n        version._id === id &&\n        fields.some((field) => version[field] !== currentVersion[field])\n      );\n    }\n\n    const dependency = new Tracker.Dependency();\n    const version = this.get(id);\n\n    dependency.depend();\n\n    const stop = this.watch(\n      (version) => {\n        if (isNewVersion(version)) {\n          dependency.changed();\n          stop();\n        }\n      },\n      { skipInitial: true }\n    );\n\n    return !! version && isNewVersion(version);\n  }\n}\n"]},"sourceType":"module","hash":"000f368569bb903c4a6055a0c422836588af0ce3"}
