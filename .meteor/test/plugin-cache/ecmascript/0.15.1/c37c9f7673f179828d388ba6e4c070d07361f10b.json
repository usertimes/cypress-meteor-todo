{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/idrismahjoubi/cypress-meteor-react/packages/accounts-password/password_client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/accounts-password/password_client.js","filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/accounts-password/password_client.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"test","cwd":"/Users/idrismahjoubi/cypress-meteor-react","root":"/Users/idrismahjoubi/cypress-meteor-react","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.13.10","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/idrismahjoubi/cypress-meteor-react/packages/accounts-password/password_client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-password/password_client.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\n\n// Used in the various functions below to handle errors consistently\nconst reportError = (error, callback) => {\n  if (callback) {\n    callback(error);\n  } else {\n    throw error;\n  }\n}; // Attempt to log in with a password.\n//\n// @param selector {String|Object} One of the following:\n//   - {username: (username)}\n//   - {email: (email)}\n//   - a string which may be a username or email, depending on whether\n//     it contains \"@\".\n// @param password {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Log the user in with a password.\n * @locus Client\n * @param {Object | String} selector\n *   Either a string interpreted as a username or an email; or an object with a\n *   single key: `email`, `username` or `id`. Username or email match in a case\n *   insensitive manner.\n * @param {String} password The user's password.\n * @param {Function} [callback] Optional callback.\n *   Called with no arguments on success, or with a single `Error` argument\n *   on failure.\n * @importFromPackage meteor\n */\n\n\nMeteor.loginWithPassword = (selector, password, callback) => {\n  if (typeof selector === 'string') if (!selector.includes('@')) selector = {\n    username: selector\n  };else selector = {\n    email: selector\n  };\n  Accounts.callLoginMethod({\n    methodArguments: [{\n      user: selector,\n      password: Accounts._hashPassword(password)\n    }],\n    userCallback: (error, result) => {\n      if (error && error.error === 400 && error.reason === 'old password format') {\n        // The \"reason\" string should match the error thrown in the\n        // password login handler in password_server.js.\n        // XXX COMPAT WITH 0.8.1.3\n        // If this user's last login was with a previous version of\n        // Meteor that used SRP, then the server throws this error to\n        // indicate that we should try again. The error includes the\n        // user's SRP identity. We provide a value derived from the\n        // identity and the password to prove to the server that we know\n        // the password without requiring a full SRP flow, as well as\n        // SHA256(password), which the server bcrypts and stores in\n        // place of the old SRP information for this user.\n        srpUpgradePath({\n          upgradeError: error,\n          userSelector: selector,\n          plaintextPassword: password\n        }, callback);\n      } else if (error) {\n        reportError(error, callback);\n      } else {\n        callback && callback();\n      }\n    }\n  });\n};\n\nAccounts._hashPassword = password => ({\n  digest: SHA256(password),\n  algorithm: \"sha-256\"\n}); // XXX COMPAT WITH 0.8.1.3\n// The server requested an upgrade from the old SRP password format,\n// so supply the needed SRP identity to login. Options:\n//   - upgradeError: the error object that the server returned to tell\n//     us to upgrade from SRP to bcrypt.\n//   - userSelector: selector to retrieve the user object\n//   - plaintextPassword: the password as a string\n\n\nconst srpUpgradePath = (options, callback) => {\n  let details;\n\n  try {\n    details = EJSON.parse(options.upgradeError.details);\n  } catch (e) {}\n\n  if (!(details && details.format === 'srp')) {\n    reportError(new Meteor.Error(400, \"Password is old. Please reset your \" + \"password.\"), callback);\n  } else {\n    Accounts.callLoginMethod({\n      methodArguments: [{\n        user: options.userSelector,\n        srp: SHA256(\"\".concat(details.identity, \":\").concat(options.plaintextPassword)),\n        password: Accounts._hashPassword(options.plaintextPassword)\n      }],\n      userCallback: callback\n    });\n  }\n}; // Attempt to log in as a new user.\n\n/**\n * @summary Create a new user.\n * @locus Anywhere\n * @param {Object} options\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.createUser = (options, callback) => {\n  options = _objectSpread({}, options); // we'll be modifying options\n\n  if (typeof options.password !== 'string') throw new Error(\"options.password must be a string\");\n\n  if (!options.password) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  } // Replace password with the hashed password.\n\n\n  options.password = Accounts._hashPassword(options.password);\n  Accounts.callLoginMethod({\n    methodName: 'createUser',\n    methodArguments: [options],\n    userCallback: callback\n  });\n}; // Change password. Must be logged in.\n//\n// @param oldPassword {String|null} By default servers no longer allow\n//   changing password without the old password, but they could so we\n//   support passing no password to the server and letting it decide.\n// @param newPassword {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Change the current user's password. Must be logged in.\n * @locus Client\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.changePassword = (oldPassword, newPassword, callback) => {\n  if (!Meteor.user()) {\n    return reportError(new Error(\"Must be logged in to change password.\"), callback);\n  }\n\n  if (!newPassword instanceof String) {\n    return reportError(new Meteor.Error(400, \"Password must be a string\"), callback);\n  }\n\n  if (!newPassword) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  Accounts.connection.apply('changePassword', [oldPassword ? Accounts._hashPassword(oldPassword) : null, Accounts._hashPassword(newPassword)], (error, result) => {\n    if (error || !result) {\n      if (error && error.error === 400 && error.reason === 'old password format') {\n        // XXX COMPAT WITH 0.8.1.3\n        // The server is telling us to upgrade from SRP to bcrypt, as\n        // in Meteor.loginWithPassword.\n        srpUpgradePath({\n          upgradeError: error,\n          userSelector: {\n            id: Meteor.userId()\n          },\n          plaintextPassword: oldPassword\n        }, err => {\n          if (err) {\n            reportError(err, callback);\n          } else {\n            // Now that we've successfully migrated from srp to\n            // bcrypt, try changing the password again.\n            Accounts.changePassword(oldPassword, newPassword, callback);\n          }\n        });\n      } else {\n        // A normal error, not an error telling us to upgrade to bcrypt\n        reportError(error || new Error(\"No result from changePassword.\"), callback);\n      }\n    } else {\n      callback && callback();\n    }\n  });\n}; // Sends an email to a user with a link that can be used to reset\n// their password\n//\n// @param options {Object}\n//   - email: (email)\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Request a forgot password email.\n * @locus Client\n * @param {Object} options\n * @param {String} options.email The email address to send a password reset link.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.forgotPassword = (options, callback) => {\n  if (!options.email) {\n    return reportError(new Meteor.Error(400, \"Must pass options.email\"), callback);\n  }\n\n  if (callback) {\n    Accounts.connection.call(\"forgotPassword\", options, callback);\n  } else {\n    Accounts.connection.call(\"forgotPassword\", options);\n  }\n}; // Resets a password based on a token originally created by\n// Accounts.forgotPassword, and then logs in the matching user.\n//\n// @param token {String}\n// @param newPassword {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the reset password URL.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.resetPassword = (token, newPassword, callback) => {\n  if (!token instanceof String) {\n    return reportError(new Meteor.Error(400, \"Token must be a string\"), callback);\n  }\n\n  if (!newPassword instanceof String) {\n    return reportError(new Meteor.Error(400, \"Password must be a string\"), callback);\n  }\n\n  if (!newPassword) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'resetPassword',\n    methodArguments: [token, Accounts._hashPassword(newPassword)],\n    userCallback: callback\n  });\n}; // Verifies a user's email address based on a token originally\n// created by Accounts.sendVerificationEmail\n//\n// @param token {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Marks the user's email address as verified. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the verification URL.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.verifyEmail = (token, callback) => {\n  if (!token) {\n    return reportError(new Meteor.Error(400, \"Need to pass token\"), callback);\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'verifyEmail',\n    methodArguments: [token],\n    userCallback: callback\n  });\n};","map":{"version":3,"sources":["packages/accounts-password/password_client.js"],"names":["_objectSpread","module","link","default","v","reportError","error","callback","Meteor","loginWithPassword","selector","password","includes","username","email","Accounts","callLoginMethod","methodArguments","user","_hashPassword","userCallback","result","reason","srpUpgradePath","upgradeError","userSelector","plaintextPassword","digest","SHA256","algorithm","options","details","EJSON","parse","e","format","Error","srp","identity","createUser","methodName","changePassword","oldPassword","newPassword","String","connection","apply","id","userId","err","forgotPassword","call","resetPassword","token","verifyEmail"],"mappings":"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","sourcesContent":["// Used in the various functions below to handle errors consistently\nconst reportError = (error, callback) => {\n   if (callback) {\n     callback(error);\n   } else {\n     throw error;\n   }\n};\n\n// Attempt to log in with a password.\n//\n// @param selector {String|Object} One of the following:\n//   - {username: (username)}\n//   - {email: (email)}\n//   - a string which may be a username or email, depending on whether\n//     it contains \"@\".\n// @param password {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Log the user in with a password.\n * @locus Client\n * @param {Object | String} selector\n *   Either a string interpreted as a username or an email; or an object with a\n *   single key: `email`, `username` or `id`. Username or email match in a case\n *   insensitive manner.\n * @param {String} password The user's password.\n * @param {Function} [callback] Optional callback.\n *   Called with no arguments on success, or with a single `Error` argument\n *   on failure.\n * @importFromPackage meteor\n */\nMeteor.loginWithPassword = (selector, password, callback) => {\n  if (typeof selector === 'string')\n    if (!selector.includes('@'))\n      selector = {username: selector};\n    else\n      selector = {email: selector};\n\n  Accounts.callLoginMethod({\n    methodArguments: [{\n      user: selector,\n      password: Accounts._hashPassword(password)\n    }],\n    userCallback: (error, result) => {\n      if (error && error.error === 400 &&\n          error.reason === 'old password format') {\n        // The \"reason\" string should match the error thrown in the\n        // password login handler in password_server.js.\n\n        // XXX COMPAT WITH 0.8.1.3\n        // If this user's last login was with a previous version of\n        // Meteor that used SRP, then the server throws this error to\n        // indicate that we should try again. The error includes the\n        // user's SRP identity. We provide a value derived from the\n        // identity and the password to prove to the server that we know\n        // the password without requiring a full SRP flow, as well as\n        // SHA256(password), which the server bcrypts and stores in\n        // place of the old SRP information for this user.\n        srpUpgradePath({\n          upgradeError: error,\n          userSelector: selector,\n          plaintextPassword: password\n        }, callback);\n      }\n      else if (error) {\n        reportError(error, callback);\n      } else {\n        callback && callback();\n      }\n    }\n  });\n};\n\nAccounts._hashPassword = password => ({\n  digest: SHA256(password),\n  algorithm: \"sha-256\"\n});\n\n\n// XXX COMPAT WITH 0.8.1.3\n// The server requested an upgrade from the old SRP password format,\n// so supply the needed SRP identity to login. Options:\n//   - upgradeError: the error object that the server returned to tell\n//     us to upgrade from SRP to bcrypt.\n//   - userSelector: selector to retrieve the user object\n//   - plaintextPassword: the password as a string\nconst srpUpgradePath = (options, callback) => {\n  let details;\n  try {\n    details = EJSON.parse(options.upgradeError.details);\n  } catch (e) {}\n  if (!(details && details.format === 'srp')) {\n    reportError(\n      new Meteor.Error(400, \"Password is old. Please reset your \" +\n                       \"password.\"), callback);\n  } else {\n    Accounts.callLoginMethod({\n      methodArguments: [{\n        user: options.userSelector,\n        srp: SHA256(`${details.identity}:${options.plaintextPassword}`),\n        password: Accounts._hashPassword(options.plaintextPassword)\n      }],\n      userCallback: callback\n    });\n  }\n};\n\n// Attempt to log in as a new user.\n\n/**\n * @summary Create a new user.\n * @locus Anywhere\n * @param {Object} options\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.createUser = (options, callback) => {\n  options = { ...options }; // we'll be modifying options\n\n  if (typeof options.password !== 'string')\n    throw new Error(\"options.password must be a string\");\n  if (!options.password) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  // Replace password with the hashed password.\n  options.password = Accounts._hashPassword(options.password);\n\n  Accounts.callLoginMethod({\n    methodName: 'createUser',\n    methodArguments: [options],\n    userCallback: callback\n  });\n};\n\n// Change password. Must be logged in.\n//\n// @param oldPassword {String|null} By default servers no longer allow\n//   changing password without the old password, but they could so we\n//   support passing no password to the server and letting it decide.\n// @param newPassword {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Change the current user's password. Must be logged in.\n * @locus Client\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.changePassword = (oldPassword, newPassword, callback) => {\n  if (!Meteor.user()) {\n    return reportError(new Error(\"Must be logged in to change password.\"), callback);\n  }\n\n  if (!newPassword instanceof String) {\n    return reportError(new Meteor.Error(400, \"Password must be a string\"), callback);\n  }\n\n  if (!newPassword) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  Accounts.connection.apply(\n    'changePassword',\n    [oldPassword ? Accounts._hashPassword(oldPassword) : null,\n     Accounts._hashPassword(newPassword)],\n    (error, result) => {\n      if (error || !result) {\n        if (error && error.error === 400 &&\n            error.reason === 'old password format') {\n          // XXX COMPAT WITH 0.8.1.3\n          // The server is telling us to upgrade from SRP to bcrypt, as\n          // in Meteor.loginWithPassword.\n          srpUpgradePath({\n            upgradeError: error,\n            userSelector: { id: Meteor.userId() },\n            plaintextPassword: oldPassword\n          }, err => {\n            if (err) {\n              reportError(err, callback);\n            } else {\n              // Now that we've successfully migrated from srp to\n              // bcrypt, try changing the password again.\n              Accounts.changePassword(oldPassword, newPassword, callback);\n            }\n          });\n        } else {\n          // A normal error, not an error telling us to upgrade to bcrypt\n          reportError(\n            error || new Error(\"No result from changePassword.\"), callback);\n        }\n      } else {\n        callback && callback();\n      }\n    }\n  );\n};\n\n// Sends an email to a user with a link that can be used to reset\n// their password\n//\n// @param options {Object}\n//   - email: (email)\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Request a forgot password email.\n * @locus Client\n * @param {Object} options\n * @param {String} options.email The email address to send a password reset link.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.forgotPassword = (options, callback) => {\n  if (!options.email) {\n    return reportError(new Meteor.Error(400, \"Must pass options.email\"), callback);\n  }\n\n  if (callback) {\n    Accounts.connection.call(\"forgotPassword\", options, callback);\n  } else {\n    Accounts.connection.call(\"forgotPassword\", options);\n  }\n};\n\n// Resets a password based on a token originally created by\n// Accounts.forgotPassword, and then logs in the matching user.\n//\n// @param token {String}\n// @param newPassword {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the reset password URL.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.resetPassword = (token, newPassword, callback) => {\n  if (!token instanceof String) {\n    return reportError(new Meteor.Error(400, \"Token must be a string\"), callback);\n  }\n\n  if (!newPassword instanceof String) {\n    return reportError(new Meteor.Error(400, \"Password must be a string\"), callback);\n  }\n\n  if (!newPassword) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'resetPassword',\n    methodArguments: [token, Accounts._hashPassword(newPassword)],\n    userCallback: callback});\n};\n\n// Verifies a user's email address based on a token originally\n// created by Accounts.sendVerificationEmail\n//\n// @param token {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Marks the user's email address as verified. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the verification URL.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.verifyEmail = (token, callback) => {\n  if (!token) {\n    return reportError(new Meteor.Error(400, \"Need to pass token\"), callback);\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'verifyEmail',\n    methodArguments: [token],\n    userCallback: callback});\n};\n"]},"sourceType":"module","hash":"c37c9f7673f179828d388ba6e4c070d07361f10b"}
